<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gcore CDN 加速你的站点</title>
    <url>/2023/03/22/Gcore-%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<h3 id="介绍-amp-环境准备"><a href="#介绍-amp-环境准备" class="headerlink" title="介绍&amp;环境准备"></a>介绍&amp;环境准备</h3><p>Gcore 是一家提供全球托管、CDN、边缘和云服务的公司。它拥有超过 140 个 CDN POPs 和 15 个云位置的全球网络，可以保护网站、应用和服务器免受复杂的 DDoS 攻击。Gcore 还专注于视频点播和直播流媒体的优化3，并且最近推出了一种支持 150 多个国家连接的零信任 5G eSIM 云平台。</p>
<ul>
<li>准备一个域名  <a class="link"   href="https://namesilo.com/" >https://namesilo.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>注册一个<strong>Gcore</strong>账号（用QQ邮箱也可以） <a class="link"   href="https://gcore.com/" >https://gcore.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="配置Gcore"><a href="#配置Gcore" class="headerlink" title="配置Gcore"></a>配置Gcore</h3><p>首先进入<a class="link"   href="https://gcore.com/%E7%BD%91%E7%AB%99%E5%90%8E%EF%BC%8C%E9%80%89%E6%8B%A9" >https://gcore.com/网站后，选择 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <strong>“Try for free”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322210930.png"
                      alt="link"
                ><br>输入你注册的账号登录之后，进入主页面在左侧栏找到 <strong>CDN</strong> 点开选中 <strong>“CDN resources”</strong> 选择创建 <strong>“Create CDN resource”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322211445.png"
                      alt="link"
                ><br>选择第一个加速类型（无需修改代码加速）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322211945.png"
                      alt="link"
                ><br>“exmaple” 里面填写你的域名，**”alias”** 随便填写一个别名（稍后需要用到做解析）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322212503.png"
                      alt="link"
                ><br>这里需要指定你域名绑定的IP地址(解析类型必须是 “A” 类型),然后点击ADD<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322212830.png"
                      alt="link"
                ><br>在这个页面我们可以看到Gcore想让你把域名托管到它家我们这里使用 <strong>“CNAME”</strong> 就不进行NS转移了，直接下一步即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213231.png"
                      alt="link"
                ><br>直接下一步即可，然后会弹出个页面，我们点击小窗口中的 <strong>“open resource setting”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213435.png"
                      alt="link"
                ><br>在 “Resource settings” 页面 我们需要配置以下几个参数 开启 <strong>“SSL”</strong> ，**”CDN cache”** 设置不缓存<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213856.png"
                      alt="link"
                ><br>这边我们的 <strong>“Resource settings”</strong> 配置就完善好了，然后去到DNS查看我们的 <strong>“CDN”</strong> , <strong>“Step by Step”</strong> 即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322220609.png"
                      alt="link"
                ><br>此时我们回到域名注册服务商处，生成一条 <strong>“Type”</strong> 类型为 <strong>“Cname”<strong>，</strong>“Name”</strong> 里面填你的别名前缀 <strong>“Target”</strong> 指定我们刚刚复制的 <strong>“CDN”</strong> （如果你是托管在CF，要把 <strong>“Proxy status”</strong> 关掉）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%22https:/cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322222858.png%22"
                      alt="link"
                ></p>
<h3 id="检验配置"><a href="#检验配置" class="headerlink" title="检验配置"></a>检验配置</h3><p>通常在你 <strong>“Get SSl certificate”</strong> 会需要15-20分钟生效，这里我们可以打开无痕模式输入你之前注册的 <strong>“Cname”</strong> 别名,在域名前面出现了一把小锁，然后返回的信息是 <strong>“bad request”</strong> 代表已经生效了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322214528.png"
                      alt="link"
                ><br>我们也可以通过 <strong>“Ping”</strong> 命令去检验一下 ，有返回信息则代表解析成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322215441.png"
                      alt="link"
                ></p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>如果你是用来做科学上网，这里需要配置你的源端口,默认是80<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322214109.png"
                      alt="link"
                ></p>
<h3 id="关于域名申请证书问题申请证书的方式有两种"><a href="#关于域名申请证书问题申请证书的方式有两种" class="headerlink" title="关于域名申请证书问题申请证书的方式有两种:"></a>关于域名申请证书问题申请证书的方式有两种:</h3><ul>
<li>dns-01:需要证书申请工具向域名解析网站发起请求(所以需要把域名解析网站的 <strong>“key”</strong> 和 <strong>“secret”</strong> 传给证书申请工具);</li>
<li>http-01:不需要依赖于域名解析网站，只需要把域名正确解析到当前服务器，你就可以在当前服务器申请，缺点是无法申请通配符证书(但可以一个证书多个域名);<br>前面我们做cdn的域名 <strong>“alias.example.com”</strong> 肯定是要申请证书的，如果你之前申请过 <strong>“example.com”</strong> 通配符证书，那么其实就不用管证书的问题了，因为新加的 <strong>“alias.example.com”</strong> 也会用这个通配符证书。</li>
</ul>
]]></content>
      <categories>
        <category>Network-Operator</category>
      </categories>
      <tags>
        <tag>Gore</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm Charts 中文指南</title>
    <url>/2023/03/24/Helm-Charts-%E4%B8%AD%E6%96%87%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="Helm包管理"><a href="#Helm包管理" class="headerlink" title="Helm包管理"></a>Helm包管理</h3><div class="tabs" id="tab-helm"><ul class="nav-tabs"><li class="tab active"><a class="#helm-1">helm指令参数</a></li><li class="tab"><a class="#helm-2">helm简单示例</a></li><li class="tab"><a class="#helm-3">helm常用用法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="helm-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">helm completion                         <span class="comment"># 生成指定shell的自动补全脚本</span></span><br><span class="line">helm create                             <span class="comment"># 用给定的名称创建一个新的图表</span></span><br><span class="line">helm dependency                         <span class="comment"># 管理图表的依赖关系</span></span><br><span class="line">helm <span class="built_in">env</span>                                <span class="comment"># helm客户端环境信息</span></span><br><span class="line">helm get                                <span class="comment"># 下载命名发布的扩展信息</span></span><br><span class="line">helm <span class="built_in">history</span>                            <span class="comment"># 获取发布历史</span></span><br><span class="line">helm install                            <span class="comment"># 安装一个图表</span></span><br><span class="line">helm lint                               <span class="comment"># 检查一个图表是否有可能的问题</span></span><br><span class="line">helm list                               <span class="comment"># 列出发布</span></span><br><span class="line">helm package                            <span class="comment"># 将一个图表目录打包成一个图表存档</span></span><br><span class="line">helm plugin                             <span class="comment"># 安装、列出或卸载Helm插件</span></span><br><span class="line">helm pull                               <span class="comment"># 从仓库下载一个图表并（可选地）在本地目录解压它</span></span><br><span class="line">helm push                               <span class="comment"># 将一个图表推送到远程</span></span><br><span class="line">helm registry                           <span class="comment"># 登录或登出一个注册表</span></span><br><span class="line">helm repo                               <span class="comment"># 添加、列出、移除、更新和索引图表仓库</span></span><br><span class="line">helm rollback                           <span class="comment"># 将一个发布回滚到之前的修订版</span></span><br><span class="line">helm search                             <span class="comment"># 在图表中搜索一个关键词</span></span><br><span class="line">helm show                               <span class="comment"># 显示一个图表的信息</span></span><br><span class="line">helm status                             <span class="comment"># 显示命名发布的状态</span></span><br><span class="line">helm template                           <span class="comment"># 在本地渲染模板</span></span><br><span class="line">helm <span class="built_in">test</span>                               <span class="comment"># 运行一个发布的测试</span></span><br><span class="line">helm uninstall                          <span class="comment"># 卸载一个发布</span></span><br><span class="line">helm upgrade                            <span class="comment"># 升级一个发布</span></span><br><span class="line">helm verify                             <span class="comment"># 验证给定路径的图表是否已经签名并且有效</span></span><br><span class="line">helm version                            <span class="comment"># 打印客户端版本信息</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="helm-2"><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">helm</span> <span class="string">upgrade</span> <span class="string">&lt;RELEASE&gt;</span> <span class="string">&lt;CHART&gt;</span> <span class="string">&lt;flags&gt;</span>  <span class="comment"># 更新release配置</span></span><br><span class="line"><span class="string">helm</span> <span class="string">rollback</span> <span class="string">&lt;RELEASE&gt;</span> <span class="string">&lt;REVISION&gt;</span>      <span class="comment"># 回滚升级前的版本 </span></span><br><span class="line"><span class="string">helm</span> <span class="string">get</span> <span class="string">&lt;COMMEND&gt;</span> <span class="string">&lt;RELEASE_NAME&gt;</span>       <span class="comment"># 获取release的配置</span></span><br><span class="line"><span class="string">helm</span> <span class="string">history</span> [<span class="string">RELEASE</span>]                  <span class="comment"># 查看历史版本号</span></span><br><span class="line"><span class="string">helm</span> <span class="string">template</span> [<span class="string">NAME</span>] [<span class="string">CHART</span>] [<span class="string">flags</span>]    <span class="comment"># 用于在本地渲染图表模板并显示输出</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="helm-3"></div></div></div>

<h4 id="Template模板文件"><a href="#Template模板文件" class="headerlink" title="Template模板文件"></a>Template模板文件</h4><p>所有模板文件都存储在 chart 的 templates&#x2F; 目录下面，当 Helm 渲染 charts 的时候，它将通过模板引擎传递该目录中的每个文件。模板的 Values 可以通过两种方式提供：</p>
<ul>
<li>Chart 开发人员可以在 chart 内部提供一个名为 values.yaml 的文件，该文件可以包含默认的 values 值内容。</li>
<li>Chart 用户可以提供包含 values 值的 YAML 文件，可以在命令行中通过 helm install 来指定该文件。<br>当用户提供自定义 values 值的时候，这些值将覆盖 chart 中 values.yaml 文件中的相应的值。</li>
</ul>
<h3 id="Charts文件结构"><a href="#Charts文件结构" class="headerlink" title="Charts文件结构"></a>Charts文件结构</h3><p>chart 被组织为一个目录中的文件集合，目录名称就是 chart 的名称（不包含版本信息）下面是一个 WordPress 的 chart  </p>
<div class="tabs" id="tab-second-helm"><ul class="nav-tabs"><li class="tab active"><a class="#second-helm-1">文件结构</a></li><li class="tab"><a class="#second-helm-2">charts.yaml示例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-helm-1"><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">wordpress/</span></span><br><span class="line">  <span class="string">Chart.yaml</span>                        <span class="comment"># 包含当前 chart 信息的 YAML 文件</span></span><br><span class="line">  <span class="string">LICENSE</span>                           <span class="comment"># 可选：包含 chart 的 license 的文本文件</span></span><br><span class="line">  <span class="string">README.md</span>                         <span class="comment"># 可选：一个可读性高的 README 文件</span></span><br><span class="line">  <span class="string">values.yaml</span>                       <span class="comment"># 当前 chart 的默认配置 values</span></span><br><span class="line">  <span class="string">values.schema.json</span>                <span class="comment"># 可选: 一个作用在 values.yaml 文件上的 JSON 模式</span></span><br><span class="line">  <span class="string">charts/</span>                           <span class="comment"># 包含该 chart 依赖的所有 chart 的目录</span></span><br><span class="line">  <span class="string">crds/</span>                             <span class="comment"># Custom Resource Definitions</span></span><br><span class="line">  <span class="string">templates/</span>                        <span class="comment"># 模板目录，与 values 结合使用时，将渲染生成 Kubernetes 资源清单文件</span></span><br><span class="line">  <span class="string">templates/NOTES.txt</span>               <span class="comment"># 可选: 包含简短使用使用的文本文件</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-helm-2"><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">chart</span> <span class="string">API</span> <span class="string">版本</span> <span class="string">(必须)</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">chart</span> <span class="string">名</span> <span class="string">(必须)</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">SemVer</span> <span class="number">2</span><span class="string">版本</span> <span class="string">(必须)</span></span><br><span class="line"><span class="attr">kubeVersion:</span> <span class="string">兼容的</span> <span class="string">Kubernetes</span> <span class="string">版本</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一句话描述</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">chart</span> <span class="string">类型</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">当前项目关键字集合</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">当前项目的</span> <span class="string">URL</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">sources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">当前项目源码</span> <span class="string">URL</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">dependencies:</span> <span class="comment"># chart 依赖列表 (可选)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">chart</span> <span class="string">名称</span> <span class="string">(nginx)</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">chart</span> <span class="string">版本</span> <span class="string">(&quot;1.2.3&quot;)</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">仓库地址</span> <span class="string">(&quot;https://example.com/charts&quot;)</span></span><br><span class="line"><span class="attr">maintainers:</span> <span class="comment"># (可选)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">维护者名字</span> <span class="string">(对每个</span> <span class="string">maintainer</span> <span class="string">是必须的)</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">维护者的</span> <span class="string">email</span> <span class="string">(可选)</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">维护者</span> <span class="string">URL</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">chart</span> <span class="string">的</span> <span class="string">SVG</span> <span class="string">或者</span> <span class="string">PNG</span> <span class="string">图标</span> <span class="string">URL</span> <span class="string">(可选).</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="string">包含的应用程序版本</span> <span class="string">(可选).</span> <span class="string">不需要</span> <span class="string">SemVer</span> <span class="string">版本</span></span><br><span class="line"><span class="attr">deprecated:</span> <span class="string">chart</span> <span class="string">是否已被弃用</span> <span class="string">(可选,</span> <span class="string">boolean)</span></span><br></pre></td></tr></table></figure></div></div></div></div>



<h5 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h5><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deis-database</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">deis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">deis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">deis-database</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">deis-database</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">deis-database</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deis-database</span></span><br><span class="line">          <span class="attr">image:</span> &#123;&#123; <span class="string">.Values.imageRegistry</span> &#125;&#125;<span class="string">/postgres:&#123;&#123;</span> <span class="string">.Values.dockerTag</span> <span class="string">&#125;&#125;</span>     <span class="comment"># docker镜像仓库 &amp;docker 镜像 TAG</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> &#123;&#123; <span class="string">.Values.pullPolicy</span> &#125;&#125;  <span class="comment"># 镜像拉取策略</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DATABASE_STORAGE</span></span><br><span class="line">              <span class="attr">value:</span> &#123;&#123; <span class="string">default</span> <span class="string">&quot;minio&quot;</span> <span class="string">.Values.storage</span> &#125;&#125;  <span class="comment"># 存储后端默认设置为 &#x27;minio&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="为模板提供一些必须的-values-值的-values-yaml-文件如下所示："><a href="#为模板提供一些必须的-values-值的-values-yaml-文件如下所示：" class="headerlink" title="为模板提供一些必须的 values 值的 values.yaml 文件如下所示："></a>为模板提供一些必须的 values 值的 values.yaml 文件如下所示：</h5><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">imageRegistry:</span> <span class="string">&quot;quay.io/deis&quot;</span></span><br><span class="line"><span class="attr">dockerTag:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="attr">pullPolicy:</span> <span class="string">&quot;Always&quot;</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">&quot;s3&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>values 文件的格式是 YAML，一个 chart 包可能包含一个默认的 values.yaml 文件，helm install 命令允许用户通过提供其他的 YAML 值文件来覆盖默认的值：</p>
<p><code>helm install --values=myvals.yaml wordpress</code><br>用这种方式来传递 values 值的时候，它们将合并到默认值文件中，比如有一个 myvals.yaml 文件如下所示：</p>
<p><code>storage: &quot;gcs&quot;</code><br>将其与 chart 的 values.yaml 文件合并后，得到的结果为：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">imageRegistry:</span> <span class="string">&quot;quay.io/deis&quot;</span></span><br><span class="line"><span class="attr">dockerTag:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="attr">pullPolicy:</span> <span class="string">&quot;Always&quot;</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">&quot;gcs&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>我们可以看到只有最后一个字段被覆盖了。</p>
]]></content>
      <categories>
        <category>Kubernetes-Operator</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作指南</title>
    <url>/2023/03/19/Git%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><ul>
<li>下载 Git OSX 版本 <a class="link"   href="https://git-scm.com/download/mac" >https://git-scm.com/download/mac <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>下载 Git Windows 版本 <a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>下载 Git Linux 版本  <a class="link"   href="https://git-scm.com/download/linux" >https://git-scm.com/download/linux <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>由于国内去官网下载Git比较慢，故我们选择阿里的镜像地址去下载 <a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >https://npm.taobao.org/mirrors/git-for-windows/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 根据官网最新的版本，我们在阿里镜像中找到对应的下载就行，速度飞快。安装过程直接按照默认的就行。</li>
</ul>
<hr>
<h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><div class="tabs" id="tab-first-tab"><ul class="nav-tabs"><li class="tab active"><a class="#first-tab-1">简单使用</a></li><li class="tab"><a class="#first-tab-2">进阶使用</a></li><li class="tab"><a class="#first-tab-3">高阶使用</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-tab-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git init                                        <span class="comment">#初始化仓库</span></span><br><span class="line">git <span class="built_in">clone</span>                                       <span class="comment">#从本地拉取一个仓库可以使用 git clone /path/to/repository</span></span><br><span class="line">                                                <span class="comment">#从远端拉取一个仓库可以使用 git clone username@host:/path/to/repository</span></span><br><span class="line">git add &lt;filename&gt;                              <span class="comment">#将改动添加至缓存区,也可以使用（git add *）</span></span><br><span class="line">git commit -m &lt;<span class="string">&#x27;information&#x27;</span>&gt;                   <span class="comment">#提交改动</span></span><br><span class="line">git push origin &lt;master&gt;                        <span class="comment">#推送到仓库</span></span><br><span class="line">git remote add origin &lt;server&gt;                  <span class="comment">#添加远程服务器</span></span><br><span class="line">git checkout -b &lt;feature-X&gt;                     <span class="comment">#创建一个分支</span></span><br><span class="line">git checkout &lt;feature&gt;                          <span class="comment">#切换分支</span></span><br><span class="line">git branch -d &lt;feature-X&gt;                       <span class="comment">#删除分支</span></span><br><span class="line">git push origin &lt;branch&gt;                        <span class="comment">#推送分支（未推送到仓库前，他人是无法看见的）</span></span><br><span class="line">git pull                                        <span class="comment">#更新本地仓库至最新（也可以在后面加上你的远程仓库地址）</span></span><br><span class="line">git merage &lt;branch&gt;                             <span class="comment">#合并分支（注意你当前分支的切换）</span></span><br><span class="line">git tag &lt;lable&gt; &lt;ID&gt;                            <span class="comment">#创建标签 </span></span><br><span class="line">git <span class="built_in">log</span>                                         <span class="comment">#获取提交 ID</span></span><br><span class="line">git checkout --&lt;filename&gt;                       <span class="comment">#替换本地改动（替换工作目录的文件，添加到缓存和新文件，不受影响）</span></span><br><span class="line">git fetch origin                                <span class="comment">#指向一个服务器</span></span><br><span class="line">git reset --hard origin/master                  <span class="comment">#重置你所有的本地改动与提交（通常与git fetch origin使用）</span></span><br><span class="line">gitk                                            <span class="comment">#图形化 git</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-tab-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --edit                                      <span class="comment">#编辑配置文件</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Danny&quot;</span>                           <span class="comment">#用户名称信息</span></span><br><span class="line">git config --global user.email Danny@example.com                <span class="comment">#用户邮箱信息</span></span><br><span class="line">git config --global core.editor vim                             <span class="comment">#更换文本编辑器</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;/path/to/editor/Notepad.exe&quot;</span>   <span class="comment">#Windos上需要指定绝对路径</span></span><br><span class="line">git config --list                                               <span class="comment">#列出Git配置信息</span></span><br><span class="line">git config &lt;key&gt;                                                <span class="comment">#检查某一项配置（git config user.name）</span></span><br><span class="line">git config --<span class="built_in">unset</span> &lt;key&gt;.&lt;name&gt;                                 <span class="comment">#删除某一项配置（git config --unset user.name）</span></span><br><span class="line">git config color.ui <span class="literal">true</span>                                        <span class="comment">#彩色的 git 输出</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-tab-3"><pre><code>test
</code></pre></div></div></div>
<hr>
]]></content>
      <categories>
        <category>Middle-Operator</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Zsh + oh-my-zsh 打造高效便捷的 shell 环境</title>
    <url>/2023/03/23/Linux-Zsh-%E4%BD%BF%E7%94%A8-oh-my-zsh-%E6%89%93%E9%80%A0%E9%AB%98%E6%95%88%E4%BE%BF%E6%8D%B7%E7%9A%84-shell-%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="安装Zsh"><a href="#安装Zsh" class="headerlink" title="安装Zsh"></a>安装Zsh</h3><p>Zsh 完全兼容 bash，支持强大的智能命令补全功能，支持大量的界面主题和插件，功能和效率都极大的增强和提高。</p>
<ul>
<li>CentOS: <code>yum -y install zsh</code></li>
<li>Ubunto: <code>apt install zsh</code></li>
</ul>
<h5 id="设置-默认-Shell-为-zsh"><a href="#设置-默认-Shell-为-zsh" class="headerlink" title="设置 默认 Shell 为 zsh"></a>设置 默认 Shell 为 zsh</h5><p><code>echo $shell</code>                   # 查看当前Shell<br><code>chsh -s /bin/zsh</code>              # 给 root 用户设置默认Shell<br><code>chsh -s /bin/zsh &lt;username&gt; </code>  # 给特定用户设置默认Shell<br>显示 <strong>“Changing shell for root”</strong> 则表示切换成功</p>
<hr>
<h3 id="安装-oh-my-zsh-amp-插件"><a href="#安装-oh-my-zsh-amp-插件" class="headerlink" title="安装 oh-my-zsh &amp; 插件"></a>安装 oh-my-zsh &amp; 插件</h3><p>这里我们采用自动安装，使用如下一键sh脚本<br><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>
<h5 id="修改主题样式"><a href="#修改主题样式" class="headerlink" title="修改主题样式"></a>修改主题样式</h5><p><code>vim .zshrc</code>                     #这里是当前路径<br><strong>ZSH_THEM</strong>字段就是主题（Passion）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323212915.png"
                      alt="link"
                ><br><em>基础样式可以查看这里: <a class="link"   href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" >https://github.com/ohmyzsh/ohmyzsh/wiki/Themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><br><em>额外主题可以查看这里: <a class="link"   href="https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes" >https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><br><strong>你还可以快速修改</strong> <code>sed -i &#39;/^ZSH_THEME=.*/c ZSH_THEME=&quot;themes&quot;&#39; ~/.zshrc &amp;&amp; source .zshrc</code></p>
<hr>
<h5 id="命令自动补全-zsh-completions"><a href="#命令自动补全-zsh-completions" class="headerlink" title="命令自动补全 zsh-completions"></a>命令自动补全 zsh-completions</h5><ul>
<li><p><strong>自动列出目录</strong><br>输入 <code>cd</code> 按 <strong>tab</strong> 键，目录将自动列出，在按 <strong>tab</strong> 可以切换</p>
</li>
<li><p><strong>自动目录名简写补全</strong><br>要访问 <code>/usr/local/bi</code>n 这个长路径，只需要 <code>cd /u/l/b</code> 按 <strong>tab</strong> 键自动补全</p>
</li>
<li><p><strong>自动大小写更正</strong><br>要访问 home 目录，只需要 <code>cd ho</code> 按 <strong>tab</strong> 键自动补全，或者查看 README.md，只需要 <code>cat rea</code> 自动更正补全</p>
</li>
<li><p><strong>自动命令补全</strong><br>输入 <code>kubectl</code> 按 <strong>tab</strong> 键即可看到可用命令</p>
</li>
<li><p><strong>自动补全命令参数</strong><br>输入 <code>kill</code> 按 <strong>tab</strong> 键会自动显示出进程的 <strong>process id</strong></p>
</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-completions</span><br><span class="line">fpath+=<span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-completions/src </span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323223023.png"
                      alt="link"
                >  </p>
<h5 id="依据历史命令补全-zsh-autosuggestions"><a href="#依据历史命令补全-zsh-autosuggestions" class="headerlink" title="依据历史命令补全 zsh-autosuggestions"></a>依据历史命令补全 zsh-autosuggestions</h5><p>根据历史输入命令的记录即时的提示（建议补全），然后按 → 键即可补全</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">vim .zshrc              <span class="comment"># 添加插件名字 zsh-autosuggestions</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323222329.png"
                      alt="link"
                ></p>
<h5 id="语法高亮插件-zsh-syntax-highlighting"><a href="#语法高亮插件-zsh-syntax-highlighting" class="headerlink" title="语法高亮插件 zsh-syntax-highlighting"></a>语法高亮插件 zsh-syntax-highlighting</h5><p>命令错误会显示红色，直到你输入正确才会变绿色，另外路径正确会显示下划线</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">vim .zshrc              <span class="comment">#添加插件名字 zsh-syntax-highlighting</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323222218.png"
                      alt="link"
                ></p>
]]></content>
      <categories>
        <category>Linux-System-Operator</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm 模板开发</title>
    <url>/2023/03/26/Helm-%E6%A8%A1%E6%9D%BF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3>]]></content>
      <categories>
        <category>Kubernetes-Operator</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux sed 指令集</title>
    <url>/2023/03/20/Linux-sed-%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    <content><![CDATA[<div class="note-large notel-primary"><div class="notel-title"><p>Introduce</p>
</div><div class="notel-content"><p>sed命令是一种非常强大和灵活的文本处理工具，它可以让您快速地对文本进行各种编辑操作，而无需打开一个交互式的文本编辑器。sed命令可以在管道中使用，也可以直接修改原文件，非常适合批量处理大量的文本数据。sed命令还支持正则表达式，可以让您更精确地匹配和替换文本。如果您想要提高您的Linux技能和效率，那么学习sed命令是一个不错的选择。</p>
 </div></div>
<hr>
<h3 id="Sed常用指令"><a href="#Sed常用指令" class="headerlink" title="Sed常用指令"></a>Sed常用指令</h3><div class="tabs" id="tab-sed-tab"><ul class="nav-tabs"><li class="tab active"><a class="#sed-tab-1">参数说明</a></li><li class="tab"><a class="#sed-tab-2">使用实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sed-tab-1"><ul>
<li>-a    新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li>
<li>-c    取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>-d    删除，因为是删除啊，所以 d 后面通常不接任何东东；</li>
<li>-i    插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>-p    打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li>
<li>-s    替换，可以直接进行替换！通常这个 s 的动作可以搭配正则表达式</li>
</ul></div><div class="tab-pane" id="sed-tab-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sed 5a\newline filename             <span class="comment"># 在filename文件第5行的下一行插入newline,将结果输出到标准输出</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;3,7d&#x27;</span>            <span class="comment"># &lt;nl&gt;带行号输出&lt;filename&gt;sed动作是删除&lt;d&gt; 3-7行,也可以夹带正则</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;8a after hello word&#x27;</span>         <span class="comment"># 在第八行的结尾加上 after hello word 字样</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;8i first hello word&#x27;</span>         <span class="comment"># 在第八行前加上 first hello word 字样</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;3,8p&#x27;</span>                         <span class="comment"># 列出filename文件内的&lt;3-8&gt;行信息</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/p&#x27;</span>                     <span class="comment"># 列出filename文件有hello关键词的行</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/d&#x27;</span>                     <span class="comment"># 删除filename文件有hello关键词的行</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/&#123;s/hello/hi/;p;q&#125;/&#x27;</span>      <span class="comment">#找到hello关键词替换为hi &lt;q&gt;退出</span></span><br><span class="line">sed <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  filename    <span class="comment"># 替换filename文件中的&lt;Oldstring&gt;为&lt;Newstring&gt; &lt;g&gt;全局替换</span></span><br><span class="line">sed -i <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  filename          <span class="comment"># 使其修改生效</span></span><br><span class="line">sed -i <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  path/to/file.*    <span class="comment">#批量替换目录下file开头的文件</span></span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <tags>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>Scoop打造windows上应用源仓库</title>
    <url>/2023/04/01/Scoop%E6%89%93%E9%80%A0windows%E4%B8%8A%E5%BA%94%E7%94%A8%E6%BA%90%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h4 id="Scoop-了解"><a href="#Scoop-了解" class="headerlink" title="Scoop 了解"></a>Scoop 了解</h4><ul>
<li>Scoop 是个优质的 Windows 包管理器。它不仅轻量，还将软件直接安装到我们的用户目录下，安程不需要申请管理员权限（UAC）也不会污染系统环境变量。</li>
<li>Scoop 官网：<a class="link"   href="https://www.scoop.sh/" >https://www.scoop.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Scoop 仓库：<a class="link"   href="https://github.com/ScoopInstaller/Scoop" >https://github.com/ScoopInstaller/Scoop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<hr>
<h4 id="Scoop-应用场景"><a href="#Scoop-应用场景" class="headerlink" title="Scoop 应用场景"></a>Scoop 应用场景</h4><ul>
<li>重装系统或新电脑装了window</li>
<li>批量安装程序</li>
<li>多线程下载</li>
</ul>
<hr>
<h4 id="Scoop-安装-amp-环境要求"><a href="#Scoop-安装-amp-环境要求" class="headerlink" title="Scoop 安装&amp;环境要求"></a>Scoop 安装&amp;环境要求</h4><ul>
<li>用户名不含中文</li>
<li>PowerShell 7+</li>
<li>Windows10 1607+ &#x2F; Windows Server 2012+</li>
<li>.Net Framework 4.5+</li>
</ul>
<hr>
<h4 id="Scoop-配置"><a href="#Scoop-配置" class="headerlink" title="Scoop 配置"></a>Scoop 配置</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br><span class="line"><span class="comment"># irm -useb get.scoop.sh | iex</span></span><br><span class="line">irm https://ghproxy.com/raw.githubusercontent.com/lzwme/scoop-proxy-cn/master/install.ps1 | iex</span><br><span class="line"></span><br><span class="line"><span class="comment"># config</span></span><br><span class="line">scoop config SCOOP_REPO https://ghproxy.com/github.com/ScoopInstaller/Scoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git ，不然后面无法拉取仓库</span></span><br><span class="line">scoop install  7zip aria2 git        </span><br><span class="line"></span><br><span class="line">scoop bucket <span class="built_in">rm</span> main</span><br><span class="line"><span class="comment"># scoop bucket add main https://ghproxy.com/github.com/ScoopInstaller/Main</span></span><br><span class="line">scoop bucket add spc https://ghproxy.com/https://github.com/lzwme/scoop-proxy-cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># show help</span></span><br><span class="line">scoop <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必备应用： scoop-search、aria2...</span></span><br><span class="line">scoop install spc/scoop-search spc/aria2</span><br></pre></td></tr></table></figure></div>

<p><code>安装好进入 &quot;C:\Users\&#123;$user&#125;\scoop&quot;</code></p>
<p>1.目录说明：</p>
<ul>
<li>apps 存放已安装的工具。</li>
<li>buckets 存放添加的源仓库。其中 buckets&#x2F;main 为官方源。</li>
<li>cache 下载的安装包缓存。若长久使用后占用空间太大了可以清理掉。</li>
<li>shims 已安装工具的入口文件。</li>
</ul>
<hr>
<p>2.其他说明：</p>
<ul>
<li>如果安装时指定了 –global 参数，则安装的位置为：C:\ProgramData\scoop。</li>
<li>可设置环境变量 SCOOP 指定当前用户默认安装的位置。</li>
<li>可设置环境变量 SCOOP_GLOBAL 指定全局默认安装的位置。</li>
<li>当我们想要找指定APP时有没有仓库存在，我们可以使用Google搜索 [AppName + scoop]</li>
</ul>
<hr>
<p>3.添加其它<strong>buckets</strong>软件库：</p>
<ul>
<li>scoop bucket known 列出已安装的 bucket</li>
<li>scoop bucket add <bucketname> 添加一个 bucket</li>
<li>scoop bucket rm <bucketname> 删除一个 bucket</li>
</ul>
<hr>
<p>4.Scoop基本指令：</p>
<ul>
<li>查找：scoop-search rust 从本地 buckets 中查找包(rust)</li>
<li>查看：scoop info rust 查看一个包的基本信息（rust）</li>
<li>安装：scoop install rust 安装一个包(rust)</li>
<li>卸载：scoop uninstall rust 卸载一个包(rust)</li>
<li>更新：scoop update [rust] 更新一个或全部包(rust)</li>
</ul>
<hr>
<div class="tabs" id="tab-scoop"><ul class="nav-tabs"><li class="tab active"><a class="#scoop-1">安装示例</a></li><li class="tab"><a class="#scoop-2">简单示例</a></li><li class="tab"><a class="#scoop-3">可选应用</a></li></ul><div class="tab-content"><div class="tab-pane active" id="scoop-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 sudo 全局安装需要系统管理员权限的应用</span></span><br><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install 7zip git openssh --global</span><br><span class="line"></span><br><span class="line">scoop install aria2 curl grep sed less <span class="built_in">touch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装常见编程开发语言支持</span></span><br><span class="line">scoop install python ruby go perl rust php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Linux 命令行 gow</span></span><br><span class="line">scoop install gow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 cmder</span></span><br><span class="line">scoop install cmder</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="scoop-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">scoop list                           <span class="comment"># 查看已安装程序</span></span><br><span class="line"></span><br><span class="line">scoop status                        <span class="comment"># 查看更新</span></span><br><span class="line"></span><br><span class="line">scoop checkup                        <span class="comment"># 自身诊断</span></span><br><span class="line"></span><br><span class="line">scoop hold &lt;softname&gt;               <span class="comment"># 软件暂停更新</span></span><br><span class="line"></span><br><span class="line">scoop reset &lt;softname@版本号&gt;       <span class="comment"># 切换到指定版本</span></span><br><span class="line"></span><br><span class="line">scoop reset *                        <span class="comment"># 重置所有软件链接及图标</span></span><br><span class="line"></span><br><span class="line">scoop cache <span class="built_in">rm</span> *                    <span class="comment"># 删除缓存软件包</span></span><br><span class="line"></span><br><span class="line">scoop cleanup <span class="built_in">rm</span> *                  <span class="comment"># 删除旧版本</span></span><br><span class="line"></span><br><span class="line">scoop home &lt;app_name&gt;               <span class="comment"># 打开应用主页(homepage)</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="scoop-3"><div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">7zip                压缩与解压工具</span><br><span class="line"></span><br><span class="line">aria2               让 scoop 在批量安装多个应用时，以多进程模式并发下载和安装</span><br><span class="line"></span><br><span class="line">NetEaseMusic        网易云音乐</span><br><span class="line"></span><br><span class="line">WeChatWork          企业微信</span><br><span class="line"></span><br><span class="line">wechat              微信</span><br><span class="line"></span><br><span class="line">utools              新一代效率工具平台，插件即应用。</span><br><span class="line"></span><br><span class="line">fscapture           轻量好用的截图工具</span><br><span class="line"></span><br><span class="line">Tencent-Meeting     腾讯会议</span><br><span class="line"></span><br><span class="line">Xshell	            好用的SSH/Telnet等协议连接工具</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="定制私有仓库"><a href="#定制私有仓库" class="headerlink" title="定制私有仓库"></a>定制私有仓库</h4><ul>
<li><p>参考以下项目仓库克隆至本地<br><code>git clone https://github.com/duzyn/scoop-cn.git</code></p>
</li>
<li><p>进入 my-bucket <code>cd my-bucket</code><br><strong>创建 App 的安装配置文件 7zip.json</strong>(参数详解<a class="link"   href="https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests" >App-Manifests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)  </p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22.01&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A multi-format file archiver with high compression ratios&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.7-zip.org/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LGPL-2.1-or-later&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;notes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Add 7-Zip as a context menu option by running: \&quot;$dir\\install-context.reg\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;64bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z2201-x64.msi&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f4afba646166999d6090b5beddde546450262dc595dddeb62132da70f70d14ca&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;extract_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Files\\7-Zip&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;32bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z2201.msi&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a4913f98821e0da0c58cd3a7f2a59f1834b85b6ca6b3fdefa5454d6c3bbef54c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;extract_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Files\\7-Zip&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;arm64&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z2201-arm64.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;700dea3e4012319a09ccadfce91cf090334cfe658d0bdc42204e77acbea1ef99&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pre_install&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$7zr = Join-Path $env:TMP &#x27;7zr.exe&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Invoke-WebRequest https://experiments-alicdn.sparanoid.net/7z/7zr.exe -OutFile $7zr&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Invoke-ExternalCommand $7zr @(&#x27;x&#x27;, \&quot;$dir\\$fname\&quot;, \&quot;-o$dir\&quot;, &#x27;-y&#x27;) | Out-Null&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Remove-Item \&quot;$dir\\Uninstall.exe\&quot;, \&quot;$dir\\*-arm64.exe\&quot;, $7zr&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;post_install&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$7zip_root = \&quot;$dir\&quot;.Replace(&#x27;\\&#x27;, &#x27;\\\\&#x27;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&#x27;install-context.reg&#x27;, &#x27;uninstall-context.reg&#x27; | ForEach-Object &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    $content = Get-Content \&quot;$bucketsdir\\main\\scripts\\7-zip\\$_\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    $content = $content.Replace(&#x27;$7zip_root&#x27;, $7zip_root)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    if ($global) &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;       $content = $content.Replace(&#x27;HKEY_CURRENT_USER&#x27;, &#x27;HKEY_LOCAL_MACHINE&#x27;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    Set-Content \&quot;$dir\\$_\&quot; $content -Encoding Ascii&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;7z.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;7zFM.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;7zG.exe&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;shortcuts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;7zFM.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;7-Zip&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;persist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Codecs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Formats&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkver&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.7-zip.org/download.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;regex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Download 7-Zip ([\\d.]+)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoupdate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;64bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z$cleanVersion-x64.msi&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;32bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z$cleanVersion.msi&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arm64&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z$cleanVersion-arm64.exe&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>将本地更改同步至 GitHub</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add 7zip app&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div></li>
<li><p>添加你的bucket库<br><code>scoop bucket add my-bucket https://github.com/&lt;你的 GitHub 用户名&gt;/my-bucket</code></p>
</li>
<li><p>测试是否成功<br><code>scoop install &lt;仓库名&gt;/7zip</code></p>
</li>
</ul>
<div class="note-large notel-blue"><div class="notel-title"><p>精选的第三方仓库参考(适用于国内)</p>
</div><div class="notel-content"><p><a class="link"   href="https://github.com/scoopcn/scoopcn" >https://github.com/scoopcn/scoopcn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/kkzzhizhou/scoop-apps" >https://github.com/kkzzhizhou/scoop-apps <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/Paxxs/Cluttered-bucket" >https://github.com/Paxxs/Cluttered-bucket <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/duzyn/scoop-cn" >https://github.com/duzyn/scoop-cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
 </div></div>]]></content>
      <categories>
        <category>Windows-Operator</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Scoop</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着AI学Python(day2)</title>
    <url>/2023/04/05/python-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AFday2/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>想要通过实践去提升自己的代码能力从而应用在工作当中，以下是我通过Microsoft的NewBing去获取Python中的练习题，并尝试自行解决，然后提交给Newbing检查代码。</p>
<p>跟着AI学习Python，让编程变得更加轻松和有趣。</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>在这个学习过程中，我会跟随AI助教，每天完成AI出的三道题目，一步一步地掌握Python的基础知识和实用技巧。在实践中，我将花费30分钟的时间进行独立完成（可以Google，完成后交与AI进行批改，查看代码改进的地方，从而记录下来。以下我将会给出自己写的代码，与AI的代码, 和需要改进的地方。</p>
<h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><p>编写一个python脚本，可以批量检测一组服务器的运行状态，<br>包括CPU使用率，内存使用率，磁盘空间，网络连接等，并将结果保存到一个csv文件中。</p>
<div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">self code</a></li><li class="tab"><a class="#first-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> paramiko <span class="comment"># 用于远程登录服务器</span></span><br><span class="line"><span class="keyword">import</span> psutil <span class="comment"># 用于获取系统信息</span></span><br><span class="line"><span class="keyword">import</span> csv <span class="comment"># 用于操作csv文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于登录服务器并获取状态信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_server_status</span>(<span class="params">ip, username, password</span>):</span><br><span class="line">    <span class="comment"># 创建一个ssh客户端对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置自动添加主机密钥</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(ip, username=username, password=password)</span><br><span class="line">    <span class="comment"># 创建一个sftp客户端对象，用于传输文件</span></span><br><span class="line">    sftp = ssh.open_sftp()</span><br><span class="line">    <span class="comment"># 在服务器上创建一个临时文件，用于存储状态信息</span></span><br><span class="line">    sftp.<span class="built_in">open</span>(<span class="string">&quot;/tmp/status.txt&quot;</span>, <span class="string">&quot;w&quot;</span>).close()</span><br><span class="line">    <span class="comment"># 在服务器上运行psutil命令，将状态信息写入临时文件</span></span><br><span class="line">    ssh.exec_command(<span class="string">&quot;python -c &#x27;import psutil; f = open(\&quot;/tmp/status.txt\&quot;, \&quot;w\&quot;); f.write(str(psutil.cpu_percent())+\&quot;,\&quot;+str(psutil.virtual_memory().percent)+\&quot;,\&quot;+str(psutil.disk_usage(\&quot;/\&quot;).percent)+\&quot;,\&quot;+str(psutil.net_io_counters().bytes_sent)+\&quot;,\&quot;+str(psutil.net_io_counters().bytes_recv))&#x27;&quot;</span>)</span><br><span class="line">    <span class="comment"># 从服务器上下载临时文件到本地</span></span><br><span class="line">    sftp.get(<span class="string">&quot;/tmp/status.txt&quot;</span>, <span class="string">&quot;status.txt&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭sftp客户端</span></span><br><span class="line">    sftp.close()</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line">    <span class="comment"># 打开本地的临时文件，读取状态信息</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;status.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        status = f.read().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="comment"># 返回一个字典，包含服务器的ip和状态信息</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;ip&quot;</span>: ip, <span class="string">&quot;cpu&quot;</span>: status[<span class="number">0</span>], <span class="string">&quot;memory&quot;</span>: status[<span class="number">1</span>], <span class="string">&quot;disk&quot;</span>: status[<span class="number">2</span>], <span class="string">&quot;sent&quot;</span>: status[<span class="number">3</span>], <span class="string">&quot;recv&quot;</span>: status[<span class="number">4</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个列表，用于存储要检测的服务器的信息，包括ip，用户名和密码</span></span><br><span class="line">servers = [</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.101&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.200&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.122&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.121&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 定义一个列表，用于存储所有服务器的状态信息</span></span><br><span class="line">status_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历要检测的服务器列表，调用函数获取状态信息，并添加到状态列表中</span></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> servers:</span><br><span class="line">    status = get_server_status(server[<span class="string">&quot;ip&quot;</span>], server[<span class="string">&quot;username&quot;</span>], server[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">    status_list.append(status)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个csv文件，用于保存状态列表中的数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;status.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建一个csv写入对象</span></span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="comment"># 写入表头</span></span><br><span class="line">    writer.writerow([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;cpu&quot;</span>, <span class="string">&quot;memory&quot;</span>, <span class="string">&quot;disk&quot;</span>, <span class="string">&quot;sent&quot;</span>, <span class="string">&quot;recv&quot;</span>])</span><br><span class="line">    <span class="comment"># 写入数据</span></span><br><span class="line">    writer.writerows(status_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><p>编写一个python脚本，可以使用paramiko模块远程登录到一台Linux服务器，并执行一些基本的命令，如查看系统信息，安装软件包，修改配置文件等，并将输出打印到屏幕上。</p>
<div class="tabs" id="tab-second"><ul class="nav-tabs"><li class="tab active"><a class="#second-1">self code</a></li><li class="tab"><a class="#second-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> paramiko <span class="comment"># 用于远程登录服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于登录服务器并执行命令</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">ip, username, password, command</span>):</span><br><span class="line">    <span class="comment"># 创建一个ssh客户端对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置自动添加主机密钥</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(ip, username=username, password=password)</span><br><span class="line">    <span class="comment"># 执行命令，并获取标准输出和错误输出</span></span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">    <span class="comment"># 打印标准输出和错误输出</span></span><br><span class="line">    <span class="built_in">print</span>(stdout.read().decode())</span><br><span class="line">    <span class="built_in">print</span>(stderr.read().decode())</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要登录的服务器的信息，包括ip，用户名和密码</span></span><br><span class="line">server = &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.200&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要执行的命令列表</span></span><br><span class="line">commands = [</span><br><span class="line">    <span class="string">&quot;uname -a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yum install -y wget &quot;</span>,</span><br><span class="line">    <span class="string">&quot;wget https://github.com/prometheus/node_exporter/releases/download/v1.3.0/node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tar xzf node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nohup /root/node_exporter-1.3.0.linux-amd64/node_exporter &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历命令列表，调用函数执行命令，并打印分隔符</span></span><br><span class="line"><span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">    run_command(server[<span class="string">&quot;ip&quot;</span>], server[<span class="string">&quot;username&quot;</span>], server[<span class="string">&quot;password&quot;</span>], command)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> paramiko <span class="comment"># 用于远程登录服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于登录服务器并执行命令</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">ip, username, password, command</span>):</span><br><span class="line">    <span class="comment"># 创建一个ssh客户端对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置自动添加主机密钥</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(ip, username=username, password=password)</span><br><span class="line">    <span class="comment"># 执行命令，并获取标准输出和错误输出</span></span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">    <span class="comment"># 打印标准输出和错误输出</span></span><br><span class="line">    <span class="built_in">print</span>(stdout.read().decode())</span><br><span class="line">    <span class="built_in">print</span>(stderr.read().decode())</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要登录的服务器的信息，包括ip，用户名和密码</span></span><br><span class="line">server = &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;192.168.1.101&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要执行的命令列表</span></span><br><span class="line">commands = [</span><br><span class="line">    <span class="string">&quot;uname -a&quot;</span>, <span class="comment"># 查看系统信息</span></span><br><span class="line">    <span class="string">&quot;yum install -y httpd&quot;</span>, <span class="comment"># 安装httpd软件包</span></span><br><span class="line">    <span class="string">&quot;sed -i &#x27;s/Listen 80/Listen 8080/g&#x27; /etc/httpd/conf/httpd.conf&quot;</span>, <span class="comment"># 修改httpd配置文件，将监听端口改为8080</span></span><br><span class="line">    <span class="string">&quot;systemctl restart httpd&quot;</span> <span class="comment"># 重启httpd服务</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历命令列表，调用函数执行命令，并打印分隔符</span></span><br><span class="line"><span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">    run_command(server[<span class="string">&quot;ip&quot;</span>], server[<span class="string">&quot;username&quot;</span>], server[<span class="string">&quot;password&quot;</span>], command)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h4><p>编写一个python脚本，可以使用requests模块调用一个RESTful API，并解析返回的JSON数据，根据不同的状态码和响应内容进行相应的处理，如打印信息，发送邮件通知，重试请求等。</p>
<div class="tabs" id="tab-frist"><ul class="nav-tabs"><li class="tab active"><a class="#frist-1">self code</a></li><li class="tab"><a class="#frist-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="frist-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="frist-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="comment"># 用于调用RESTful API</span></span><br><span class="line"><span class="keyword">import</span> json <span class="comment"># 用于解析JSON数据</span></span><br><span class="line"><span class="keyword">import</span> smtplib <span class="comment"># 用于发送邮件</span></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText <span class="comment"># 用于构造邮件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于调用RESTful API，并解析返回的JSON数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_api</span>(<span class="params">url, headers, data</span>):</span><br><span class="line">    <span class="comment"># 尝试发送POST请求，并获取响应对象</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, headers=headers, data=data)</span><br><span class="line">    <span class="comment"># 如果发生异常，打印异常信息，并返回None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 如果响应状态码是200，表示请求成功</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 尝试解析响应内容为JSON格式，并返回字典对象</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = json.loads(response.text)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="comment"># 如果解析失败，打印异常信息，并返回None</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 如果响应状态码是其他值，表示请求失败，打印状态码和响应内容，并返回None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(response.status_code)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于发送邮件通知</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">sender, password, receiver, subject, content</span>):</span><br><span class="line">    <span class="comment"># 创建一个MIMEText对象，用于构造邮件内容</span></span><br><span class="line">    message = MIMEText(content, <span class="string">&quot;plain&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 设置发件人，收件人和主题</span></span><br><span class="line">    message[<span class="string">&quot;From&quot;</span>] = sender</span><br><span class="line">    message[<span class="string">&quot;To&quot;</span>] = receiver</span><br><span class="line">    message[<span class="string">&quot;Subject&quot;</span>] = subject</span><br><span class="line">    <span class="comment"># 创建一个SMTP对象，用于连接邮件服务器</span></span><br><span class="line">    smtp = smtplib.SMTP_SSL(<span class="string">&quot;smtp.qq.com&quot;</span>, <span class="number">465</span>)</span><br><span class="line">    <span class="comment"># 登录发件人的邮箱账号和授权码</span></span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line">    <span class="comment"># 发送邮件，并打印结果</span></span><br><span class="line">    smtp.sendmail(sender, receiver, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Email sent successfully.&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭SMTP对象</span></span><br><span class="line">    smtp.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要调用的API的URL，请求头和请求体</span></span><br><span class="line">url = <span class="string">&quot;https://api.example.com/v1/user/login&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要发送的邮件的相关信息，包括发件人，授权码，收件人，主题和内容</span></span><br><span class="line">sender = <span class="string">&quot;123456789@qq.com&quot;</span></span><br><span class="line">password = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">receiver = <span class="string">&quot;987654321@qq.com&quot;</span></span><br><span class="line">subject = <span class="string">&quot;API call result&quot;</span></span><br><span class="line">content = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，获取API返回的结果</span></span><br><span class="line">result = call_api(url, headers, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果结果不是None，表示请求成功并解析成功</span></span><br><span class="line"><span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 根据不同的响应内容进行相应的处理</span></span><br><span class="line">    <span class="comment"># 如果响应内容中有code字段，并且值为0，表示登录成功，打印用户信息，并将内容写入邮件内容中</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;code&quot;</span> <span class="keyword">in</span> result <span class="keyword">and</span> result[<span class="string">&quot;code&quot;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Login successful.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;User info:&quot;</span>, result[<span class="string">&quot;data&quot;</span>])</span><br><span class="line">        content += <span class="string">&quot;Login successful.\n&quot;</span></span><br><span class="line">        content += <span class="string">&quot;User info: &quot;</span> + <span class="built_in">str</span>(result[<span class="string">&quot;data&quot;</span>]) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="comment"># 如果响应内容中有code字段，并且值为1，表示登录失败，打印错误信息，并将内容写入邮件内容中</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;code&quot;</span> <span class="keyword">in</span> result <span class="keyword">and</span> result[<span class="string">&quot;code&quot;</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Login failed.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error info:&quot;</span>, result[<span class="string">&quot;msg&quot;</span>])</span><br><span class="line">        content += <span class="string">&quot;Login failed.\n&quot;</span></span><br><span class="line">        content += <span class="string">&quot;Error info: &quot;</span> + result[<span class="string">&quot;msg&quot;</span>] + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="comment"># 如果响应内容中没有code字段，或者值为其他值，表示未知的响应内容，打印原始响应内容，并将内容写入邮件内容中</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Unknown response.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Response info:&quot;</span>, result)</span><br><span class="line">        content += <span class="string">&quot;Unknown response.\n&quot;</span></span><br><span class="line">        content += <span class="string">&quot;Response info: &quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="comment"># 如果结果是None，表示请求失败或解析失败，打印错误信息，并将内容写入邮件内容中</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;API call failed or JSON parse failed.&quot;</span>)</span><br><span class="line">    content += <span class="string">&quot;API call failed or JSON parse failed.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，发送邮件通知，并附上邮件内容</span></span><br><span class="line">send_email(sender, password, receiver, subject, content)</span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python自动化批量部署node_exporter</title>
    <url>/2023/04/09/python%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E9%83%A8%E7%BD%B2node-exporter/</url>
    <content><![CDATA[<h4 id="介绍-amp-环境"><a href="#介绍-amp-环境" class="headerlink" title="介绍&amp;环境"></a>介绍&amp;环境</h4><p>node_exporter是一个用Go编写的可插拔的度量收集器，它可以暴露*NIX内核和硬件相关的度量指标1。它可以通过HTTP端口9100（默认）监听和提供度量数据2。它可以被Prometheus实例配置和抓取，以监控主机系统的性能和状态。 <strong>Centos7</strong></p>
<h4 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h4><p>我们需要定义一个主程序文件main.py和存储服务器信息的文件remote_server.py</p>
<div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">main</a></li><li class="tab"><a class="#first-2">server</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主程序，使用多线程来批量登录并执行命令</span></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> remote_server <span class="keyword">import</span> servers_ex <span class="comment"># 导入服务器信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">server</span>):</span><br><span class="line">    <span class="comment"># 定义一个函数，用来连接服务器并执行命令</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.connect(server[<span class="string">&#x27;hostname&#x27;</span>], server[<span class="string">&#x27;port&#x27;</span>], server[<span class="string">&#x27;username&#x27;</span>], server[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">    <span class="comment"># 这里可以根据需要修改要执行的命令</span></span><br><span class="line">    <span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">        <span class="comment"># 执行命令，并获取标准输出和错误输出</span></span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">        <span class="comment"># 打印标准输出和错误输出</span></span><br><span class="line">        output = stdout.read()</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line">commands = [</span><br><span class="line">    <span class="string">&quot;uname -a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yum install -y wget &quot;</span>,</span><br><span class="line">    <span class="string">&quot;wget https://github.com/prometheus/node_exporter/releases/download/v1.3.0/node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tar xzf node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nohup /root/node_exporter-1.3.0.linux-amd64/node_exporter &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">threads = [] <span class="comment"># 创建一个空列表，用来存储线程对象</span></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> servers_ex: <span class="comment"># 遍历服务器列表</span></span><br><span class="line">    t = threading.Thread(target=run_command, args=(server,)) <span class="comment"># 为每个服务器创建一个线程，并传入服务器信息作为参数</span></span><br><span class="line">    threads.append(t) <span class="comment"># 将线程对象添加到列表中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads: <span class="comment"># 遍历线程列表</span></span><br><span class="line">    t.start() <span class="comment"># 启动每个线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads: <span class="comment"># 遍历线程列表</span></span><br><span class="line">    t.join() <span class="comment"># 等待每个线程结束</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;All done&#x27;</span>) <span class="comment"># 所有线程结束后打印提示信息</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">servers_ex = [</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.101&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.121&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.122&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.200&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>登录服务器查看 <code>ps -ef | grep node_exporter </code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230409183436.png"
                      alt="link"
                ></p>
<h4 id="Prometheus添加监控"><a href="#Prometheus添加监控" class="headerlink" title="Prometheus添加监控"></a>Prometheus添加监控</h4><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node-exporter&quot;</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.101</span><span class="string">:9100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.122</span><span class="string">:9100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.121</span><span class="string">:9100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.200</span><span class="string">:9100</span></span><br></pre></td></tr></table></figure></div>
<h4 id="优化脚本"><a href="#优化脚本" class="headerlink" title="优化脚本"></a>优化脚本</h4><p>有时候node_exporter里面当中有很多我们不需要采集的参数，这时候我们就可以把它们进行丢弃或者只采集我们想要的指标，以保证我们的程序占用较少资源，减轻Prometheus的查询负载。<br>修改exec_command：<br><code>nohup /root/node_exporter-1.3.0.linux-amd64/node_exporter --no-collector.hwmon --no-collector.nfs --no-collector.nfsd --no-collector.nvme --no-collector.dmi --no-collector.arp &gt;/dev/null 2&gt;&amp;1 &amp;</code></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着AI学Python(day1)</title>
    <url>/2023/04/05/python-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AFday1/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>刚学习完 mosh 的 Python 6小时完整课程，想要通过实践去提升自己的代码能力从而应用在工作当中，以下是我通过Microsoft的NewBing去获取Python中的练习题，并尝试自行解决，然后提交给Newbing检查代码。</p>
<p>跟着AI学习Python，让编程变得更加轻松和有趣。</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>在这个学习过程中，我会跟随AI助教，每天完成AI出的三道题目，一步一步地掌握Python的基础知识和实用技巧。在实践中，我将花费30分钟的时间进行独立完成（可以Google，完成后交与AI进行批改，查看代码改进的地方，从而记录下来。以下我将会给出自己写的代码，与AI的代码, 和需要改进的地方。</p>
<h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><p>写一个函数，它接受一个字符串作为参数，然后返回这个字符串的反转。例如，如果输入”hello”，则返回”olleh”。</p>
<div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">self code</a></li><li class="tab"><a class="#first-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">number</span>():  </span><br><span class="line">    <span class="built_in">print</span>(x[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">number()</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_string</span>():               <span class="comment"># 函数名最好能够反映出它们的功能</span></span><br><span class="line">    x = <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(x[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">reverse_string()</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><p>写一个函数，它接受一个列表作为参数，然后返回这个列表中的最大值和最小值。例如，如果输入[1, 2, 3, 4, 5]，则返回(5, 1)。</p>
<div class="tabs" id="tab-second"><ul class="nav-tabs"><li class="tab active"><a class="#second-1">self code</a></li><li class="tab"><a class="#second-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>():</span><br><span class="line">    l = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>]        </span><br><span class="line">    max_l = <span class="built_in">max</span>(l)</span><br><span class="line">    min_l = <span class="built_in">min</span>(l)</span><br><span class="line">    <span class="keyword">return</span> max_l, min_l</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>())</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>():</span><br><span class="line">    <span class="comment">#你的list函数中的l列表最好用数字而不是字符串，因为字符串的比较是按照字典序的，可能会出现意外的结果。比如&quot;10&quot;会比&quot;2&quot;小，因为&quot;1&quot;的ASCII码比&quot;2&quot;小。</span></span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]        </span><br><span class="line">    max_l = <span class="built_in">max</span>(l)</span><br><span class="line">    min_l = <span class="built_in">min</span>(l)</span><br><span class="line">    <span class="keyword">return</span> max_l, min_l</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h4><p>写一个函数，它接受一个正整数n作为参数，然后返回斐波那契数列的第n项。斐波那契数列是这样定义的:<br>第一项和第二项都是1，从第三项开始，每一项都是前两项的和。例如，斐波那契数列的前10项是：1, 1, 2, 3, 5, 8, 13, 21, 34, 55。</p>
<div class="tabs" id="tab-frist"><ul class="nav-tabs"><li class="tab active"><a class="#frist-1">self code</a></li><li class="tab"><a class="#frist-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="frist-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="frist-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用递归实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_recursive</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 如果n是1或者2，直接返回1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 否则，返回前两项的和</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci_recursive(n - <span class="number">1</span>) + fibonacci_recursive(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用循环实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_iterative</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 初始化第一项和第二项为1</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 如果n是1或者2，直接返回1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 否则，从第三项开始循环计算</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 循环n-2次</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 计算当前项为前两项的和</span></span><br><span class="line">            c = a + b</span><br><span class="line">            <span class="comment"># 更新前两项为当前项和前一项</span></span><br><span class="line">            a = b</span><br><span class="line">            b = c</span><br><span class="line">        <span class="comment"># 返回最后一项</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci_recursive(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(fibonacci_iterative(<span class="number">10</span>))</span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vmess + TLS + WS 实现科学上网</title>
    <url>/2023/03/12/vmess-ws-tls-web%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li><p>vps购买：<a class="link"   href="https://bandwagonhost.com/" >https://bandwagonhost.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>               #系统使用：Debian 10</p>
</li>
<li><p><em>优惠码：<code>BWHNCXNVXV</code></em>     </p>
</li>
<li><p>域名购买：<a class="link"   href="https://namesilo.com/" >https://namesilo.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>     </p>
</li>
<li><p>ssh工具：<a class="link"   href="https://www.hostbuf.com/t/988.html" >https://www.hostbuf.com/t/988.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h3 id="节点搭建"><a href="#节点搭建" class="headerlink" title="节点搭建"></a>节点搭建</h3><div class="note note-primary icon-padding"><i class="note-icon fa-solid fa-circle-arrow-right"></i><p>直接全选复制粘贴即可</p>
</div> 
<p><code>apt update -y &amp;&amp; apt-get install vim curl wget  -y</code></p>
<h6 id="安装x-ui面板"><a href="#安装x-ui面板" class="headerlink" title="安装x-ui面板"></a>安装x-ui面板</h6><p>X-ui出于安全考虑，安装&#x2F;更新完成后需要强制修改端口与账户密码，step by step 即可<br>安装完成后输入<code>x-ui</code>即可管理面板<br><code>bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/xui-1.png"
                      alt="link"
                ><br>配置如上所示端口随便，id用默认生成的就行，点击查看按钮复制链接导入V2ray<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/xui-2.png"
                      alt="link"
                ><br>对应的面板设置，重启完面板后我们是登录不进去的，因为还没配置nginx</p>
<h6 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h6><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">apt install nginx socat -y</span><br><span class="line"><span class="comment">#安装acme：</span></span><br><span class="line">curl https://get.acme.sh | sh</span><br><span class="line"><span class="comment">#添加软链接：</span></span><br><span class="line"><span class="built_in">ln</span> -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh</span><br><span class="line"><span class="comment">#切换CA机构： </span></span><br><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br><span class="line"><span class="comment">#申请证书： </span></span><br><span class="line">acme.sh  --issue -d 你的域名 -k ec-256 --webroot  /var/www/html</span><br><span class="line"><span class="comment">#安装证书：</span></span><br><span class="line">acme.sh --install-cert -d 你的域名 --ecc --key-file       /etc/x-ui/server.key  --fullchain-file /etc/x-ui/server.crt --reloadcmd     <span class="string">&quot;systemctl force-reload nginx&quot;</span></span><br></pre></td></tr></table></figure></div>
<h6 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h6><p><code>vim /etc/nginx/nginx.conf</code> 替换原有配置文件。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;    </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    gzip on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line"></span><br><span class="line">        server_name nicename.co;  <span class="comment">#你的域名</span></span><br><span class="line">        ssl_certificate       /etc/x-ui/server.crt;  <span class="comment">#证书位置</span></span><br><span class="line">        ssl_certificate_key   /etc/x-ui/server.key; <span class="comment">#私钥位置</span></span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 1d;</span><br><span class="line">        ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">        ssl_session_tickets off;</span><br><span class="line">        ssl_protocols    TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://bing.com; <span class="comment">#伪装网址</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_ssl_server_name on;</span><br><span class="line">            sub_filter_once off;</span><br><span class="line">            sub_filter <span class="string">&quot;bing.com&quot;</span> <span class="variable">$server_name</span>;</span><br><span class="line">            proxy_set_header Host <span class="string">&quot;bing.com&quot;</span>;</span><br><span class="line">            proxy_set_header Referer <span class="variable">$http_referer</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">            proxy_set_header Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line">            proxy_set_header Accept-Language <span class="string">&quot;zh-CN&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /xui &#123;   <span class="comment">#xui路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:9999;  <span class="comment">#xui监听端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        location /.well-known/ &#123;</span><br><span class="line">               root /var/www/html;</span><br><span class="line">            &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h6><p>通过修改nginx的配置文件实现ws path路径分流  </p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">location /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_pass http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note note-danger icon-padding"><i class="note-icon fa-solid fa-times-circle"></i><p>TLS开启之后记得也要去你的域名服务商处更改为端对端完全加密，不然会提示重定向次数过多</p>
</div>]]></content>
      <categories>
        <category>Network-Operator</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Hexo搭建个人Blog</title>
    <url>/2023/03/11/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/</url>
    <content><![CDATA[<h3 id="Hexo环境准备"><a href="#Hexo环境准备" class="headerlink" title="Hexo环境准备"></a>Hexo环境准备</h3><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p>直接到官网上下载安装即可<a class="link"   href="https://nodejs.org/en/download/" >https://nodejs.org/en/download/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li>Node自带npm</li>
<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>      #更换npm源</li>
</ul>
<h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><ul>
<li>Windows：下载并安装 git.</li>
<li>Mac：使用 Homebrew, MacPorts 或者下载 安装程序。</li>
<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>
<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>
<li>安装完之后到你要安装的路径下右键打开”git bash here”</li>
</ul>
<h3 id="开始安装Hexo"><a href="#开始安装Hexo" class="headerlink" title="开始安装Hexo"></a>开始安装Hexo</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">or</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
<ul>
<li>输入hexo -v 查看版本</li>
</ul>
<h5 id="新建Blog文件夹-x2F-初始化Hexo-x2F-安装npm"><a href="#新建Blog文件夹-x2F-初始化Hexo-x2F-安装npm" class="headerlink" title="新建Blog文件夹&#x2F;初始化Hexo&#x2F;安装npm"></a>新建Blog文件夹&#x2F;初始化Hexo&#x2F;安装npm</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init Blog          #初始化Hexo</span><br><span class="line">cd blog</span><br><span class="line">npm install             #安装npm</span><br></pre></td></tr></table></figure></div>
<h5 id="启动服务Site"><a href="#启动服务Site" class="headerlink" title="启动服务Site"></a>启动服务Site</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g                  #生成 hexo generate </span><br><span class="line">hexo s                  #启动服务预览 hexo server                           </span><br></pre></td></tr></table></figure></div>
<ul>
<li>本地访问<a class="link"   href="http://localhost:4000/" >http://localhost:4000/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 至此Hexo就搭建好了。</li>
</ul>
<h3 id="将网站托管至GitHub"><a href="#将网站托管至GitHub" class="headerlink" title="将网站托管至GitHub"></a>将网站托管至GitHub</h3><h5 id="1-新建仓库和Token"><a href="#1-新建仓库和Token" class="headerlink" title="1. 新建仓库和Token"></a>1. 新建仓库和Token</h5><p>仓库名称格式：用户名+GitHub.io<br>Token: 登录github设置setting-&gt;Developer Settings-&gt;Prosonal access tokens 注意勾选权限！</p>
<h5 id="2-安装upload插件"><a href="#2-安装upload插件" class="headerlink" title="2. 安装upload插件"></a>2. 安装upload插件</h5><p><code>npm install hexo-deployer-git --save</code></p>
<h5 id="3-修改Hexo配置文件指定仓库路径"><a href="#3-修改Hexo配置文件指定仓库路径" class="headerlink" title="3. 修改Hexo配置文件指定仓库路径"></a>3. 修改Hexo配置文件指定仓库路径</h5><p>在你blog文件夹下找到”_config.yml,ctrl+f 定位到deploy配置,注意格式deploy下的配置要缩进两行。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://&lt;Token&gt;@github.com/用户名/仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></div>
<h5 id="4-推送Site到Github"><a href="#4-推送Site到Github" class="headerlink" title="4. 推送Site到Github"></a>4. 推送Site到Github</h5><p><code>hexo d</code>                      #部署hexo deploy</p>
<h5 id="5-访问地址-https-x2F-x2F-仓库名-github-io-x2F"><a href="#5-访问地址-https-x2F-x2F-仓库名-github-io-x2F" class="headerlink" title="5. 访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;"></a>5. 访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;</h5><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>想要更换掉固定模板风格，你可以在GitHub搜索Hexo主题或者去到<a class="link"   href="https://hexo.io/themes/%E4%B8%8B%E6%8C%91%E9%80%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%8C%89%E7%85%A7%E8%AF%A5%E6%A8%A1%E6%9D%BF%E4%B8%8B%E7%9A%84" >https://hexo.io/themes/下挑选自定义模板，之后按照该模板下的 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> How To Use? step by step 即可。<br>一般步骤为：</p>
<ol>
<li>下载</li>
<li>把包丢到themes文件夹下面</li>
<li>配置Hero的_config.yml，修改”themes: 模板名”</li>
<li>本地调试完之后，我们就可以推送到GitHub上了。</li>
<li>cd到你的blog文件夹下Use commond:<code>hexo clean</code> -&gt; <code>hexo g</code> -&gt; <code>hexo d</code></li>
<li>访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;</li>
</ol>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>Hexo使用Markdown语法，它可以使普通文本具有一定的格式。<br>cd至blog文件下 <code>hexo new &quot;my frist blog&quot;</code><br>查看source资源下有没有我们刚刚创建的文章<br>之后就是发布的步骤&#x2F;&#x2F;清理hexo clean&#x2F;&#x2F;构建hexo g&#x2F;&#x2F;上传hexo d （如果上传报错，大多是网络原因，多上传几次即可）</p>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>有时我们不满足主题自由的一些页面，希望自己添加一些页面。<br>我们可以新建页面,新建页面则会在hexo的source中新建该页面文件并生成md文件，这就是你要编辑的博客页了。<br><code>hexo new page &quot;my home page&quot;</code><br>然后打开主题的配置文件_config.yml，在菜单属性menu中的添加如下（注意不是Hexo的配置文件）<br>将页面路径联接到页面上去（是一个key:value）左侧定义菜单,右侧定义页面</p>
<h4 id="Hexo命令清单"><a href="#Hexo命令清单" class="headerlink" title="Hexo命令清单"></a>Hexo命令清单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g                      #安装Hexo</span><br><span class="line">npm update hexo -g                       #升级</span><br><span class="line">hexo init                                #初始化博客</span><br><span class="line">hexo server                              #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s                           #静态模式</span><br><span class="line">hexo server -p 5000                      #更改端口</span><br><span class="line">hexo server -i 192.168.1.1               #自定义 IP</span><br><span class="line">hexo clean                               #清除缓存，若是网页正常情况下可以忽略这条命令</span><br><span class="line">hexo new draft &quot;文件名&quot;                  #新建草稿文件</span><br><span class="line">hexo server --draft                      #预览草稿文件</span><br><span class="line">hexo publish &quot;文件名&quot;                    #发布草稿文件     </span><br></pre></td></tr></table></figure></div>
<h4 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;          #新建文章</span><br><span class="line">hexo g == hexo generate                          #生成      </span><br><span class="line">hexo s == hexo server                            #启动服务预览</span><br><span class="line">hexo d == hexo deploy                            #部署</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Other-Operator</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
