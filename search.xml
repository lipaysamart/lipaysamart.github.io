<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vmess + TLS + WS 实现科学上网</title>
    <url>/2023/03/12/vmess-ws-tls-web%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li><p>vps购买：<a class="link"   href="https://bandwagonhost.com/" >https://bandwagonhost.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>               #系统使用：Debian 10</p>
</li>
<li><p><em>优惠码：<code>BWHNCXNVXV</code></em>     </p>
</li>
<li><p>域名购买：<a class="link"   href="https://namesilo.com/" >https://namesilo.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>     </p>
</li>
<li><p>ssh工具：<a class="link"   href="https://www.hostbuf.com/t/988.html" >https://www.hostbuf.com/t/988.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h3 id="节点搭建"><a href="#节点搭建" class="headerlink" title="节点搭建"></a>节点搭建</h3><div class="note note-primary icon-padding"><i class="note-icon fa-solid fa-circle-arrow-right"></i><p>直接全选复制粘贴即可</p>
</div> 
<p><code>apt update -y &amp;&amp; apt-get install vim curl wget  -y</code></p>
<h6 id="安装x-ui面板"><a href="#安装x-ui面板" class="headerlink" title="安装x-ui面板"></a>安装x-ui面板</h6><p>X-ui出于安全考虑，安装&#x2F;更新完成后需要强制修改端口与账户密码，step by step 即可<br>安装完成后输入<code>x-ui</code>即可管理面板<br><code>bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/xui-1.png"
                      alt="link"
                ><br>配置如上所示端口随便，id用默认生成的就行，点击查看按钮复制链接导入V2ray<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/xui-2.png"
                      alt="link"
                ><br>对应的面板设置，重启完面板后我们是登录不进去的，因为还没配置nginx</p>
<h6 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h6><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">apt install nginx socat -y</span><br><span class="line"><span class="comment">#安装acme：</span></span><br><span class="line">curl https://get.acme.sh | sh</span><br><span class="line"><span class="comment">#添加软链接：</span></span><br><span class="line"><span class="built_in">ln</span> -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh</span><br><span class="line"><span class="comment">#切换CA机构： </span></span><br><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br><span class="line"><span class="comment">#申请证书： </span></span><br><span class="line">acme.sh  --issue -d 你的域名 -k ec-256 --webroot  /var/www/html</span><br><span class="line"><span class="comment">#安装证书：</span></span><br><span class="line">acme.sh --install-cert -d 你的域名 --ecc --key-file       /etc/x-ui/server.key  --fullchain-file /etc/x-ui/server.crt --reloadcmd     <span class="string">&quot;systemctl force-reload nginx&quot;</span></span><br></pre></td></tr></table></figure></div>
<h6 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h6><p><code>vim /etc/nginx/nginx.conf</code> 替换原有配置文件。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;    </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    gzip on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line"></span><br><span class="line">        server_name nicename.co;  <span class="comment">#你的域名</span></span><br><span class="line">        ssl_certificate       /etc/x-ui/server.crt;  <span class="comment">#证书位置</span></span><br><span class="line">        ssl_certificate_key   /etc/x-ui/server.key; <span class="comment">#私钥位置</span></span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 1d;</span><br><span class="line">        ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">        ssl_session_tickets off;</span><br><span class="line">        ssl_protocols    TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://bing.com; <span class="comment">#伪装网址</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_ssl_server_name on;</span><br><span class="line">            sub_filter_once off;</span><br><span class="line">            sub_filter <span class="string">&quot;bing.com&quot;</span> <span class="variable">$server_name</span>;</span><br><span class="line">            proxy_set_header Host <span class="string">&quot;bing.com&quot;</span>;</span><br><span class="line">            proxy_set_header Referer <span class="variable">$http_referer</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">            proxy_set_header Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line">            proxy_set_header Accept-Language <span class="string">&quot;zh-CN&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /xui &#123;   <span class="comment">#xui路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:9999;  <span class="comment">#xui监听端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        location /.well-known/ &#123;</span><br><span class="line">               root /var/www/html;</span><br><span class="line">            &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h6><p>通过修改nginx的配置文件实现ws path路径分流  </p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">location /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_pass http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note note-danger icon-padding"><i class="note-icon fa-solid fa-times-circle"></i><p>TLS开启之后记得也要去你的域名服务商处更改为端对端完全加密，不然会提示重定向次数过多</p>
</div>]]></content>
      <categories>
        <category>Network-operation</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Hexo搭建个人Blog</title>
    <url>/2023/03/11/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/</url>
    <content><![CDATA[<h3 id="Hexo环境准备"><a href="#Hexo环境准备" class="headerlink" title="Hexo环境准备"></a>Hexo环境准备</h3><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p>直接到官网上下载安装即可<a class="link"   href="https://nodejs.org/en/download/" >https://nodejs.org/en/download/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li>Node自带npm</li>
<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>      #更换npm源</li>
</ul>
<h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><ul>
<li>Windows：下载并安装 git.</li>
<li>Mac：使用 Homebrew, MacPorts 或者下载 安装程序。</li>
<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>
<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>
<li>安装完之后到你要安装的路径下右键打开”git bash here”</li>
</ul>
<h3 id="开始安装Hexo"><a href="#开始安装Hexo" class="headerlink" title="开始安装Hexo"></a>开始安装Hexo</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">or</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
<ul>
<li>输入hexo -v 查看版本</li>
</ul>
<h5 id="新建Blog文件夹-x2F-初始化Hexo-x2F-安装npm"><a href="#新建Blog文件夹-x2F-初始化Hexo-x2F-安装npm" class="headerlink" title="新建Blog文件夹&#x2F;初始化Hexo&#x2F;安装npm"></a>新建Blog文件夹&#x2F;初始化Hexo&#x2F;安装npm</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init Blog          #初始化Hexo</span><br><span class="line">cd blog</span><br><span class="line">npm install             #安装npm</span><br></pre></td></tr></table></figure></div>
<h5 id="启动服务Site"><a href="#启动服务Site" class="headerlink" title="启动服务Site"></a>启动服务Site</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g                  #生成 hexo generate </span><br><span class="line">hexo s                  #启动服务预览 hexo server                           </span><br></pre></td></tr></table></figure></div>
<ul>
<li>本地访问<a class="link"   href="http://localhost:4000/" >http://localhost:4000/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 至此Hexo就搭建好了。</li>
</ul>
<h3 id="将网站托管至GitHub"><a href="#将网站托管至GitHub" class="headerlink" title="将网站托管至GitHub"></a>将网站托管至GitHub</h3><h5 id="1-新建仓库和Token"><a href="#1-新建仓库和Token" class="headerlink" title="1. 新建仓库和Token"></a>1. 新建仓库和Token</h5><p>仓库名称格式：用户名+GitHub.io<br>Token: 登录github设置setting-&gt;Developer Settings-&gt;Prosonal access tokens 注意勾选权限！</p>
<h5 id="2-安装upload插件"><a href="#2-安装upload插件" class="headerlink" title="2. 安装upload插件"></a>2. 安装upload插件</h5><p><code>npm install hexo-deployer-git --save</code></p>
<h5 id="3-修改Hexo配置文件指定仓库路径"><a href="#3-修改Hexo配置文件指定仓库路径" class="headerlink" title="3. 修改Hexo配置文件指定仓库路径"></a>3. 修改Hexo配置文件指定仓库路径</h5><p>在你blog文件夹下找到”_config.yml,ctrl+f 定位到deploy配置,注意格式deploy下的配置要缩进两行。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://&lt;Token&gt;@github.com/用户名/仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></div>
<h5 id="4-推送Site到Github"><a href="#4-推送Site到Github" class="headerlink" title="4. 推送Site到Github"></a>4. 推送Site到Github</h5><p><code>hexo d</code>                      #部署hexo deploy</p>
<h5 id="5-访问地址-https-x2F-x2F-仓库名-github-io-x2F"><a href="#5-访问地址-https-x2F-x2F-仓库名-github-io-x2F" class="headerlink" title="5. 访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;"></a>5. 访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;</h5><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>想要更换掉固定模板风格，你可以在GitHub搜索Hexo主题或者去到<a class="link"   href="https://hexo.io/themes/%E4%B8%8B%E6%8C%91%E9%80%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%8C%89%E7%85%A7%E8%AF%A5%E6%A8%A1%E6%9D%BF%E4%B8%8B%E7%9A%84" >https://hexo.io/themes/下挑选自定义模板，之后按照该模板下的 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> How To Use? step by step 即可。<br>一般步骤为：</p>
<ol>
<li>下载</li>
<li>把包丢到themes文件夹下面</li>
<li>配置Hero的_config.yml，修改”themes: 模板名”</li>
<li>本地调试完之后，我们就可以推送到GitHub上了。</li>
<li>cd到你的blog文件夹下Use commond:<code>hexo clean</code> -&gt; <code>hexo g</code> -&gt; <code>hexo d</code></li>
<li>访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;</li>
</ol>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>Hexo使用Markdown语法，它可以使普通文本具有一定的格式。<br>cd至blog文件下 <code>hexo new &quot;my frist blog&quot;</code><br>查看source资源下有没有我们刚刚创建的文章<br>之后就是发布的步骤&#x2F;&#x2F;清理hexo clean&#x2F;&#x2F;构建hexo g&#x2F;&#x2F;上传hexo d （如果上传报错，大多是网络原因，多上传几次即可）</p>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>有时我们不满足主题自由的一些页面，希望自己添加一些页面。<br>我们可以新建页面,新建页面则会在hexo的source中新建该页面文件并生成md文件，这就是你要编辑的博客页了。<br><code>hexo new page &quot;my home page&quot;</code><br>然后打开主题的配置文件_config.yml，在菜单属性menu中的添加如下（注意不是Hexo的配置文件）<br>将页面路径联接到页面上去（是一个key:value）左侧定义菜单,右侧定义页面</p>
<h4 id="Hexo命令清单"><a href="#Hexo命令清单" class="headerlink" title="Hexo命令清单"></a>Hexo命令清单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g                      #安装Hexo</span><br><span class="line">npm update hexo -g                       #升级</span><br><span class="line">hexo init                                #初始化博客</span><br><span class="line">hexo server                              #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s                           #静态模式</span><br><span class="line">hexo server -p 5000                      #更改端口</span><br><span class="line">hexo server -i 192.168.1.1               #自定义 IP</span><br><span class="line">hexo clean                               #清除缓存，若是网页正常情况下可以忽略这条命令</span><br><span class="line">hexo new draft &quot;文件名&quot;                  #新建草稿文件</span><br><span class="line">hexo server --draft                      #预览草稿文件</span><br><span class="line">hexo publish &quot;文件名&quot;                    #发布草稿文件     </span><br></pre></td></tr></table></figure></div>
<h4 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;          #新建文章</span><br><span class="line">hexo g == hexo generate                          #生成      </span><br><span class="line">hexo s == hexo server                            #启动服务预览</span><br><span class="line">hexo d == hexo deploy                            #部署</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Other-operation</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作指南</title>
    <url>/2023/03/19/Git%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><ul>
<li>下载 Git OSX 版本 <a class="link"   href="https://git-scm.com/download/mac" >https://git-scm.com/download/mac <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>下载 Git Windows 版本 <a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>下载 Git Linux 版本  <a class="link"   href="https://git-scm.com/download/linux" >https://git-scm.com/download/linux <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>由于国内去官网下载Git比较慢，故我们选择阿里的镜像地址去下载 <a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >https://npm.taobao.org/mirrors/git-for-windows/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 根据官网最新的版本，我们在阿里镜像中找到对应的下载就行，速度飞快。安装过程直接按照默认的就行。</li>
</ul>
<hr>
<h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><div class="tabs" id="tab-first-tab"><ul class="nav-tabs"><li class="tab active"><a class="#first-tab-1">简单使用</a></li><li class="tab"><a class="#first-tab-2">进阶使用</a></li><li class="tab"><a class="#first-tab-3">高阶使用</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-tab-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git init                                        <span class="comment">#初始化仓库</span></span><br><span class="line">git <span class="built_in">clone</span>                                       <span class="comment">#从本地拉取一个仓库可以使用 git clone /path/to/repository</span></span><br><span class="line">                                                <span class="comment">#从远端拉取一个仓库可以使用 git clone username@host:/path/to/repository</span></span><br><span class="line">git add &lt;filename&gt;                              <span class="comment">#将改动添加至缓存区,也可以使用（git add *）</span></span><br><span class="line">git commit -m &lt;<span class="string">&#x27;information&#x27;</span>&gt;                   <span class="comment">#提交改动</span></span><br><span class="line">git push origin &lt;master&gt;                        <span class="comment">#推送到仓库</span></span><br><span class="line">git remote add origin &lt;server&gt;                  <span class="comment">#添加远程服务器</span></span><br><span class="line">git checkout -b &lt;feature-X&gt;                     <span class="comment">#创建一个分支</span></span><br><span class="line">git checkout &lt;feature&gt;                          <span class="comment">#切换分支</span></span><br><span class="line">git branch -d &lt;feature-X&gt;                       <span class="comment">#删除分支</span></span><br><span class="line">git push origin &lt;branch&gt;                        <span class="comment">#推送分支（未推送到仓库前，他人是无法看见的）</span></span><br><span class="line">git pull                                        <span class="comment">#更新本地仓库至最新（也可以在后面加上你的远程仓库地址）</span></span><br><span class="line">git merage &lt;branch&gt;                             <span class="comment">#合并分支（注意你当前分支的切换）</span></span><br><span class="line">git tag &lt;lable&gt; &lt;ID&gt;                            <span class="comment">#创建标签 </span></span><br><span class="line">git <span class="built_in">log</span>                                         <span class="comment">#获取提交 ID</span></span><br><span class="line">git checkout --&lt;filename&gt;                       <span class="comment">#替换本地改动（替换工作目录的文件，添加到缓存和新文件，不受影响）</span></span><br><span class="line">git fetch origin                                <span class="comment">#指向一个服务器</span></span><br><span class="line">git reset --hard origin/master                  <span class="comment">#重置你所有的本地改动与提交（通常与git fetch origin使用）</span></span><br><span class="line">gitk                                            <span class="comment">#图形化 git</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-tab-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --edit                                      <span class="comment">#编辑配置文件</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Danny&quot;</span>                           <span class="comment">#用户名称信息</span></span><br><span class="line">git config --global user.email Danny@example.com                <span class="comment">#用户邮箱信息</span></span><br><span class="line">git config --global core.editor vim                             <span class="comment">#更换文本编辑器</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;/path/to/editor/Notepad.exe&quot;</span>   <span class="comment">#Windos上需要指定绝对路径</span></span><br><span class="line">git config --list                                               <span class="comment">#列出Git配置信息</span></span><br><span class="line">git config &lt;key&gt;                                                <span class="comment">#检查某一项配置（git config user.name）</span></span><br><span class="line">git config --<span class="built_in">unset</span> &lt;key&gt;.&lt;name&gt;                                 <span class="comment">#删除某一项配置（git config --unset user.name）</span></span><br><span class="line">git config color.ui <span class="literal">true</span>                                        <span class="comment">#彩色的 git 输出</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-tab-3"><pre><code>test
</code></pre></div></div></div>
<hr>
]]></content>
      <categories>
        <category>Other-operation</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux sed 指令集</title>
    <url>/2023/03/20/Linux-sed-%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    <content><![CDATA[<div class="note-large notel-primary"><div class="notel-title"><p>Introduce</p>
</div><div class="notel-content"><p>sed命令是一种非常强大和灵活的文本处理工具，它可以让您快速地对文本进行各种编辑操作，而无需打开一个交互式的文本编辑器。sed命令可以在管道中使用，也可以直接修改原文件，非常适合批量处理大量的文本数据。sed命令还支持正则表达式，可以让您更精确地匹配和替换文本。如果您想要提高您的Linux技能和效率，那么学习sed命令是一个不错的选择。</p>
 </div></div>
<hr>
<h3 id="Sed常用指令"><a href="#Sed常用指令" class="headerlink" title="Sed常用指令"></a>Sed常用指令</h3><div class="tabs" id="tab-sed-tab"><ul class="nav-tabs"><li class="tab active"><a class="#sed-tab-1">参数说明</a></li><li class="tab"><a class="#sed-tab-2">使用实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sed-tab-1"><ul>
<li>-a    新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li>
<li>-c    取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>-d    删除，因为是删除啊，所以 d 后面通常不接任何东东；</li>
<li>-i    插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>-p    打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li>
<li>-s    替换，可以直接进行替换！通常这个 s 的动作可以搭配正则表达式</li>
</ul></div><div class="tab-pane" id="sed-tab-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sed 5a\newline filename             <span class="comment"># 在filename文件第5行的下一行插入newline,将结果输出到标准输出</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;3,7d&#x27;</span>            <span class="comment"># &lt;nl&gt;带行号输出&lt;filename&gt;sed动作是删除&lt;d&gt; 3-7行,也可以夹带正则</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;8a after hello word&#x27;</span>         <span class="comment"># 在第八行的结尾加上 after hello word 字样</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;8i first hello word&#x27;</span>         <span class="comment"># 在第八行前加上 first hello word 字样</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;3,8p&#x27;</span>                         <span class="comment"># 列出filename文件内的&lt;3-8&gt;行信息</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/p&#x27;</span>                     <span class="comment"># 列出filename文件有hello关键词的行</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/d&#x27;</span>                     <span class="comment"># 删除filename文件有hello关键词的行</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/&#123;s/hello/hi/;p;q&#125;/&#x27;</span>      <span class="comment">#找到hello关键词替换为hi &lt;q&gt;退出</span></span><br><span class="line">sed <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  filename    <span class="comment"># 替换filename文件中的&lt;Oldstring&gt;为&lt;Newstring&gt; &lt;g&gt;全局替换</span></span><br><span class="line">sed -i <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  filename          <span class="comment"># 使其修改生效</span></span><br><span class="line">sed -i <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  path/to/file.*    <span class="comment">#批量替换目录下file开头的文件</span></span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <tags>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>Gcore CDN 加速你的站点</title>
    <url>/2023/03/22/Gcore-%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<h3 id="介绍-amp-环境准备"><a href="#介绍-amp-环境准备" class="headerlink" title="介绍&amp;环境准备"></a>介绍&amp;环境准备</h3><p>Gcore 是一家提供全球托管、CDN、边缘和云服务的公司。它拥有超过 140 个 CDN POPs 和 15 个云位置的全球网络，可以保护网站、应用和服务器免受复杂的 DDoS 攻击。Gcore 还专注于视频点播和直播流媒体的优化3，并且最近推出了一种支持 150 多个国家连接的零信任 5G eSIM 云平台。</p>
<ul>
<li>准备一个域名  <a class="link"   href="https://namesilo.com/" >https://namesilo.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>注册一个<strong>Gcore</strong>账号（用QQ邮箱也可以） <a class="link"   href="https://gcore.com/" >https://gcore.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="配置Gcore"><a href="#配置Gcore" class="headerlink" title="配置Gcore"></a>配置Gcore</h3><p>首先进入<a class="link"   href="https://gcore.com/%E7%BD%91%E7%AB%99%E5%90%8E%EF%BC%8C%E9%80%89%E6%8B%A9" >https://gcore.com/网站后，选择 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <strong>“Try for free”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322210930.png"
                      alt="link"
                ><br>输入你注册的账号登录之后，进入主页面在左侧栏找到 <strong>CDN</strong> 点开选中 <strong>“CDN resources”</strong> 选择创建 <strong>“Create CDN resource”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322211445.png"
                      alt="link"
                ><br>选择第一个加速类型（无需修改代码加速）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322211945.png"
                      alt="link"
                ><br>“exmaple” 里面填写你的域名，**”alias”** 随便填写一个别名（稍后需要用到做解析）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322212503.png"
                      alt="link"
                ><br>这里需要指定你域名绑定的IP地址(解析类型必须是 “A” 类型),然后点击ADD<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322212830.png"
                      alt="link"
                ><br>在这个页面我们可以看到Gcore想让你把域名托管到它家我们这里使用 <strong>“CNAME”</strong> 就不进行NS转移了，直接下一步即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213231.png"
                      alt="link"
                ><br>直接下一步即可，然后会弹出个页面，我们点击小窗口中的 <strong>“open resource setting”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213435.png"
                      alt="link"
                ><br>在 “Resource settings” 页面 我们需要配置以下几个参数 开启 <strong>“SSL”</strong> ，**”CDN cache”** 设置不缓存<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213856.png"
                      alt="link"
                ><br>这边我们的 <strong>“Resource settings”</strong> 配置就完善好了，然后去到DNS查看我们的 <strong>“CDN”</strong> , <strong>“Step by Step”</strong> 即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322220609.png"
                      alt="link"
                ><br>此时我们回到域名注册服务商处，生成一条 <strong>“Type”</strong> 类型为 <strong>“Cname”<strong>，</strong>“Name”</strong> 里面填你的别名前缀 <strong>“Target”</strong> 指定我们刚刚复制的 <strong>“CDN”</strong> （如果你是托管在CF，要把 <strong>“Proxy status”</strong> 关掉）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%22https:/cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322222858.png%22"
                      alt="link"
                ></p>
<h3 id="检验配置"><a href="#检验配置" class="headerlink" title="检验配置"></a>检验配置</h3><p>通常在你 <strong>“Get SSl certificate”</strong> 会需要15-20分钟生效，这里我们可以打开无痕模式输入你之前注册的 <strong>“Cname”</strong> 别名,在域名前面出现了一把小锁，然后返回的信息是 <strong>“bad request”</strong> 代表已经生效了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322214528.png"
                      alt="link"
                ><br>我们也可以通过 <strong>“Ping”</strong> 命令去检验一下 ，有返回信息则代表解析成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322215441.png"
                      alt="link"
                ></p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>如果你是用来做科学上网，这里需要配置你的源端口,默认是80<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322214109.png"
                      alt="link"
                ></p>
<h3 id="关于域名申请证书问题申请证书的方式有两种"><a href="#关于域名申请证书问题申请证书的方式有两种" class="headerlink" title="关于域名申请证书问题申请证书的方式有两种:"></a>关于域名申请证书问题申请证书的方式有两种:</h3><ul>
<li>dns-01:需要证书申请工具向域名解析网站发起请求(所以需要把域名解析网站的 <strong>“key”</strong> 和 <strong>“secret”</strong> 传给证书申请工具);</li>
<li>http-01:不需要依赖于域名解析网站，只需要把域名正确解析到当前服务器，你就可以在当前服务器申请，缺点是无法申请通配符证书(但可以一个证书多个域名);<br>前面我们做cdn的域名 <strong>“alias.example.com”</strong> 肯定是要申请证书的，如果你之前申请过 <strong>“example.com”</strong> 通配符证书，那么其实就不用管证书的问题了，因为新加的 <strong>“alias.example.com”</strong> 也会用这个通配符证书。</li>
</ul>
]]></content>
      <categories>
        <category>Network-operation</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
        <tag>Gore</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Zsh + oh-my-zsh 打造高效便捷的 shell 环境</title>
    <url>/2023/03/23/Linux-Zsh-%E4%BD%BF%E7%94%A8-oh-my-zsh-%E6%89%93%E9%80%A0%E9%AB%98%E6%95%88%E4%BE%BF%E6%8D%B7%E7%9A%84-shell-%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="安装Zsh"><a href="#安装Zsh" class="headerlink" title="安装Zsh"></a>安装Zsh</h3><p>Zsh 完全兼容 bash，支持强大的智能命令补全功能，支持大量的界面主题和插件，功能和效率都极大的增强和提高。</p>
<ul>
<li>CentOS: <code>yum -y install zsh</code></li>
<li>Ubunto: <code>apt install zsh</code></li>
</ul>
<h5 id="设置-默认-Shell-为-zsh"><a href="#设置-默认-Shell-为-zsh" class="headerlink" title="设置 默认 Shell 为 zsh"></a>设置 默认 Shell 为 zsh</h5><p><code>echo $shell</code>                   # 查看当前Shell<br><code>chsh -s /bin/zsh</code>              # 给 root 用户设置默认Shell<br><code>chsh -s /bin/zsh &lt;username&gt; </code>  # 给特定用户设置默认Shell<br>显示 <strong>“Changing shell for root”</strong> 则表示切换成功</p>
<hr>
<h3 id="安装-oh-my-zsh-amp-插件"><a href="#安装-oh-my-zsh-amp-插件" class="headerlink" title="安装 oh-my-zsh &amp; 插件"></a>安装 oh-my-zsh &amp; 插件</h3><p>这里我们采用自动安装，使用如下一键sh脚本<br><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>
<h5 id="修改主题样式"><a href="#修改主题样式" class="headerlink" title="修改主题样式"></a>修改主题样式</h5><p><code>vim .zshrc</code>                     #这里是当前路径<br><strong>ZSH_THEM</strong>字段就是主题（Passion）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323212915.png"
                      alt="link"
                ><br><em>基础样式可以查看这里: <a class="link"   href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" >https://github.com/ohmyzsh/ohmyzsh/wiki/Themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><br><em>额外主题可以查看这里: <a class="link"   href="https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes" >https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><br><strong>你还可以快速修改</strong> <code>sed -i &#39;/^ZSH_THEME=.*/c ZSH_THEME=&quot;themes&quot;&#39; ~/.zshrc &amp;&amp; source .zshrc</code></p>
<hr>
<h5 id="命令自动补全-zsh-completions"><a href="#命令自动补全-zsh-completions" class="headerlink" title="命令自动补全 zsh-completions"></a>命令自动补全 zsh-completions</h5><ul>
<li><p><strong>自动列出目录</strong><br>输入 <code>cd</code> 按 <strong>tab</strong> 键，目录将自动列出，在按 <strong>tab</strong> 可以切换</p>
</li>
<li><p><strong>自动目录名简写补全</strong><br>要访问 <code>/usr/local/bi</code>n 这个长路径，只需要 <code>cd /u/l/b</code> 按 <strong>tab</strong> 键自动补全</p>
</li>
<li><p><strong>自动大小写更正</strong><br>要访问 home 目录，只需要 <code>cd ho</code> 按 <strong>tab</strong> 键自动补全，或者查看 README.md，只需要 <code>cat rea</code> 自动更正补全</p>
</li>
<li><p><strong>自动命令补全</strong><br>输入 <code>kubectl</code> 按 <strong>tab</strong> 键即可看到可用命令</p>
</li>
<li><p><strong>自动补全命令参数</strong><br>输入 <code>kill</code> 按 <strong>tab</strong> 键会自动显示出进程的 <strong>process id</strong></p>
</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-completions</span><br><span class="line">fpath+=<span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-completions/src </span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323223023.png"
                      alt="link"
                >  </p>
<h5 id="依据历史命令补全-zsh-autosuggestions"><a href="#依据历史命令补全-zsh-autosuggestions" class="headerlink" title="依据历史命令补全 zsh-autosuggestions"></a>依据历史命令补全 zsh-autosuggestions</h5><p>根据历史输入命令的记录即时的提示（建议补全），然后按 → 键即可补全</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">vim .zshrc              <span class="comment"># 添加插件名字 zsh-autosuggestions</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323222329.png"
                      alt="link"
                ></p>
<h5 id="语法高亮插件-zsh-syntax-highlighting"><a href="#语法高亮插件-zsh-syntax-highlighting" class="headerlink" title="语法高亮插件 zsh-syntax-highlighting"></a>语法高亮插件 zsh-syntax-highlighting</h5><p>命令错误会显示红色，直到你输入正确才会变绿色，另外路径正确会显示下划线</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">vim .zshrc              <span class="comment">#添加插件名字 zsh-syntax-highlighting</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323222218.png"
                      alt="link"
                ></p>
]]></content>
      <categories>
        <category>Linux-System-Operator</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
