<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gcore CDN 加速你的站点</title>
    <url>/2023/03/22/Gcore-%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<h3 id="介绍-amp-环境准备"><a href="#介绍-amp-环境准备" class="headerlink" title="介绍&amp;环境准备"></a>介绍&amp;环境准备</h3><p>Gcore 是一家提供全球托管、CDN、边缘和云服务的公司。它拥有超过 140 个 CDN POPs 和 15 个云位置的全球网络，可以保护网站、应用和服务器免受复杂的 DDoS 攻击。Gcore 还专注于视频点播和直播流媒体的优化3，并且最近推出了一种支持 150 多个国家连接的零信任 5G eSIM 云平台。</p>
<ul>
<li>准备一个域名  <a class="link"   href="https://namesilo.com/" >https://namesilo.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>注册一个<strong>Gcore</strong>账号（用QQ邮箱也可以） <a class="link"   href="https://gcore.com/" >https://gcore.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="配置Gcore"><a href="#配置Gcore" class="headerlink" title="配置Gcore"></a>配置Gcore</h3><p>首先进入<a class="link"   href="https://gcore.com/%E7%BD%91%E7%AB%99%E5%90%8E%EF%BC%8C%E9%80%89%E6%8B%A9" >https://gcore.com/网站后，选择 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <strong>“Try for free”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322210930.png"
                      alt="link"
                ><br>输入你注册的账号登录之后，进入主页面在左侧栏找到 <strong>CDN</strong> 点开选中 <strong>“CDN resources”</strong> 选择创建 <strong>“Create CDN resource”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322211445.png"
                      alt="link"
                ><br>选择第一个加速类型（无需修改代码加速）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322211945.png"
                      alt="link"
                ><br>“exmaple” 里面填写你的域名，**”alias”** 随便填写一个别名（稍后需要用到做解析）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322212503.png"
                      alt="link"
                ><br>这里需要指定你域名绑定的IP地址(解析类型必须是 “A” 类型),然后点击ADD<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322212830.png"
                      alt="link"
                ><br>在这个页面我们可以看到Gcore想让你把域名托管到它家我们这里使用 <strong>“CNAME”</strong> 就不进行NS转移了，直接下一步即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213231.png"
                      alt="link"
                ><br>直接下一步即可，然后会弹出个页面，我们点击小窗口中的 <strong>“open resource setting”</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213435.png"
                      alt="link"
                ><br>在 “Resource settings” 页面 我们需要配置以下几个参数 开启 <strong>“SSL”</strong> ，**”CDN cache”** 设置不缓存<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322213856.png"
                      alt="link"
                ><br>这边我们的 <strong>“Resource settings”</strong> 配置就完善好了，然后去到DNS查看我们的 <strong>“CDN”</strong> , <strong>“Step by Step”</strong> 即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322220609.png"
                      alt="link"
                ><br>此时我们回到域名注册服务商处，生成一条 <strong>“Type”</strong> 类型为 <strong>“Cname”<strong>，</strong>“Name”</strong> 里面填你的别名前缀 <strong>“Target”</strong> 指定我们刚刚复制的 <strong>“CDN”</strong> （如果你是托管在CF，要把 <strong>“Proxy status”</strong> 关掉）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/%22https:/cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322222858.png%22"
                      alt="link"
                ></p>
<h3 id="检验配置"><a href="#检验配置" class="headerlink" title="检验配置"></a>检验配置</h3><p>通常在你 <strong>“Get SSl certificate”</strong> 会需要15-20分钟生效，这里我们可以打开无痕模式输入你之前注册的 <strong>“Cname”</strong> 别名,在域名前面出现了一把小锁，然后返回的信息是 <strong>“bad request”</strong> 代表已经生效了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322214528.png"
                      alt="link"
                ><br>我们也可以通过 <strong>“Ping”</strong> 命令去检验一下 ，有返回信息则代表解析成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322215441.png"
                      alt="link"
                ></p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>如果你是用来做科学上网，这里需要配置你的源端口,默认是80<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230322214109.png"
                      alt="link"
                ></p>
<h3 id="关于域名申请证书问题申请证书的方式有两种"><a href="#关于域名申请证书问题申请证书的方式有两种" class="headerlink" title="关于域名申请证书问题申请证书的方式有两种:"></a>关于域名申请证书问题申请证书的方式有两种:</h3><ul>
<li>dns-01:需要证书申请工具向域名解析网站发起请求(所以需要把域名解析网站的 <strong>“key”</strong> 和 <strong>“secret”</strong> 传给证书申请工具);</li>
<li>http-01:不需要依赖于域名解析网站，只需要把域名正确解析到当前服务器，你就可以在当前服务器申请，缺点是无法申请通配符证书(但可以一个证书多个域名);<br>前面我们做cdn的域名 <strong>“alias.example.com”</strong> 肯定是要申请证书的，如果你之前申请过 <strong>“example.com”</strong> 通配符证书，那么其实就不用管证书的问题了，因为新加的 <strong>“alias.example.com”</strong> 也会用这个通配符证书。</li>
</ul>
]]></content>
      <categories>
        <category>Network-Operator</category>
      </categories>
      <tags>
        <tag>Gore</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作指南</title>
    <url>/2023/03/19/Git%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><ul>
<li>下载 Git OSX 版本 <a class="link"   href="https://git-scm.com/download/mac" >https://git-scm.com/download/mac <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>下载 Git Windows 版本 <a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>下载 Git Linux 版本  <a class="link"   href="https://git-scm.com/download/linux" >https://git-scm.com/download/linux <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>由于国内去官网下载Git比较慢，故我们选择阿里的镜像地址去下载 <a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >https://npm.taobao.org/mirrors/git-for-windows/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 根据官网最新的版本，我们在阿里镜像中找到对应的下载就行，速度飞快。安装过程直接按照默认的就行。</li>
</ul>
<hr>
<h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><div class="tabs" id="tab-first-tab"><ul class="nav-tabs"><li class="tab active"><a class="#first-tab-1">简单使用</a></li><li class="tab"><a class="#first-tab-2">进阶使用</a></li><li class="tab"><a class="#first-tab-3">高阶使用</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-tab-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git init                                        <span class="comment">#初始化仓库</span></span><br><span class="line">git <span class="built_in">clone</span>                                       <span class="comment">#从本地拉取一个仓库可以使用 git clone /path/to/repository</span></span><br><span class="line">                                                <span class="comment">#从远端拉取一个仓库可以使用 git clone username@host:/path/to/repository</span></span><br><span class="line">git add &lt;filename&gt;                              <span class="comment">#将改动添加至缓存区,也可以使用（git add *）</span></span><br><span class="line">git commit -m &lt;<span class="string">&#x27;information&#x27;</span>&gt;                   <span class="comment">#提交改动</span></span><br><span class="line">git push origin &lt;master&gt;                        <span class="comment">#推送到仓库</span></span><br><span class="line">git remote add origin &lt;server&gt;                  <span class="comment">#添加远程服务器</span></span><br><span class="line">git checkout -b &lt;feature-X&gt;                     <span class="comment">#创建一个分支</span></span><br><span class="line">git checkout &lt;feature&gt;                          <span class="comment">#切换分支</span></span><br><span class="line">git branch -d &lt;feature-X&gt;                       <span class="comment">#删除分支</span></span><br><span class="line">git push origin &lt;branch&gt;                        <span class="comment">#推送分支（未推送到仓库前，他人是无法看见的）</span></span><br><span class="line">git pull                                        <span class="comment">#更新本地仓库至最新（也可以在后面加上你的远程仓库地址）</span></span><br><span class="line">git merage &lt;branch&gt;                             <span class="comment">#合并分支（注意你当前分支的切换）</span></span><br><span class="line">git tag &lt;lable&gt; &lt;ID&gt;                            <span class="comment">#创建标签 </span></span><br><span class="line">git <span class="built_in">log</span>                                         <span class="comment">#获取提交 ID</span></span><br><span class="line">git checkout --&lt;filename&gt;                       <span class="comment">#替换本地改动（替换工作目录的文件，添加到缓存和新文件，不受影响）</span></span><br><span class="line">git fetch origin                                <span class="comment">#指向一个服务器</span></span><br><span class="line">git reset --hard origin/master                  <span class="comment">#重置你所有的本地改动与提交（通常与git fetch origin使用）</span></span><br><span class="line">gitk                                            <span class="comment">#图形化 git</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-tab-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --edit                                      <span class="comment">#编辑配置文件</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Danny&quot;</span>                           <span class="comment">#用户名称信息</span></span><br><span class="line">git config --global user.email Danny@example.com                <span class="comment">#用户邮箱信息</span></span><br><span class="line">git config --global core.editor vim                             <span class="comment">#更换文本编辑器</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;/path/to/editor/Notepad.exe&quot;</span>   <span class="comment">#Windos上需要指定绝对路径</span></span><br><span class="line">git config --list                                               <span class="comment">#列出Git配置信息</span></span><br><span class="line">git config &lt;key&gt;                                                <span class="comment">#检查某一项配置（git config user.name）</span></span><br><span class="line">git config --<span class="built_in">unset</span> &lt;key&gt;.&lt;name&gt;                                 <span class="comment">#删除某一项配置（git config --unset user.name）</span></span><br><span class="line">git config color.ui <span class="literal">true</span>                                        <span class="comment">#彩色的 git 输出</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-tab-3"><pre><code>test
</code></pre></div></div></div>
<hr>
]]></content>
      <categories>
        <category>Middle-Operator</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm Charts 中文指南</title>
    <url>/2023/03/24/Helm-Charts-%E4%B8%AD%E6%96%87%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h3 id="Helm包管理"><a href="#Helm包管理" class="headerlink" title="Helm包管理"></a>Helm包管理</h3><div class="tabs" id="tab-helm"><ul class="nav-tabs"><li class="tab active"><a class="#helm-1">helm指令参数</a></li><li class="tab"><a class="#helm-2">helm简单示例</a></li><li class="tab"><a class="#helm-3">helm常用用法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="helm-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">helm completion                         <span class="comment"># 生成指定shell的自动补全脚本</span></span><br><span class="line">helm create                             <span class="comment"># 用给定的名称创建一个新的图表</span></span><br><span class="line">helm dependency                         <span class="comment"># 管理图表的依赖关系</span></span><br><span class="line">helm <span class="built_in">env</span>                                <span class="comment"># helm客户端环境信息</span></span><br><span class="line">helm get                                <span class="comment"># 下载命名发布的扩展信息</span></span><br><span class="line">helm <span class="built_in">history</span>                            <span class="comment"># 获取发布历史</span></span><br><span class="line">helm install                            <span class="comment"># 安装一个图表</span></span><br><span class="line">helm lint                               <span class="comment"># 检查一个图表是否有可能的问题</span></span><br><span class="line">helm list                               <span class="comment"># 列出发布</span></span><br><span class="line">helm package                            <span class="comment"># 将一个图表目录打包成一个图表存档</span></span><br><span class="line">helm plugin                             <span class="comment"># 安装、列出或卸载Helm插件</span></span><br><span class="line">helm pull                               <span class="comment"># 从仓库下载一个图表并（可选地）在本地目录解压它</span></span><br><span class="line">helm push                               <span class="comment"># 将一个图表推送到远程</span></span><br><span class="line">helm registry                           <span class="comment"># 登录或登出一个注册表</span></span><br><span class="line">helm repo                               <span class="comment"># 添加、列出、移除、更新和索引图表仓库</span></span><br><span class="line">helm rollback                           <span class="comment"># 将一个发布回滚到之前的修订版</span></span><br><span class="line">helm search                             <span class="comment"># 在图表中搜索一个关键词</span></span><br><span class="line">helm show                               <span class="comment"># 显示一个图表的信息</span></span><br><span class="line">helm status                             <span class="comment"># 显示命名发布的状态</span></span><br><span class="line">helm template                           <span class="comment"># 在本地渲染模板</span></span><br><span class="line">helm <span class="built_in">test</span>                               <span class="comment"># 运行一个发布的测试</span></span><br><span class="line">helm uninstall                          <span class="comment"># 卸载一个发布</span></span><br><span class="line">helm upgrade                            <span class="comment"># 升级一个发布</span></span><br><span class="line">helm verify                             <span class="comment"># 验证给定路径的图表是否已经签名并且有效</span></span><br><span class="line">helm version                            <span class="comment"># 打印客户端版本信息</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="helm-2"><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">helm</span> <span class="string">upgrade</span> <span class="string">&lt;RELEASE&gt;</span> <span class="string">&lt;CHART&gt;</span> <span class="string">&lt;flags&gt;</span>  <span class="comment"># 更新release配置</span></span><br><span class="line"><span class="string">helm</span> <span class="string">rollback</span> <span class="string">&lt;RELEASE&gt;</span> <span class="string">&lt;REVISION&gt;</span>      <span class="comment"># 回滚升级前的版本 </span></span><br><span class="line"><span class="string">helm</span> <span class="string">get</span> <span class="string">&lt;COMMEND&gt;</span> <span class="string">&lt;RELEASE_NAME&gt;</span>       <span class="comment"># 获取release的配置</span></span><br><span class="line"><span class="string">helm</span> <span class="string">history</span> [<span class="string">RELEASE</span>]                  <span class="comment"># 查看历史版本号</span></span><br><span class="line"><span class="string">helm</span> <span class="string">template</span> [<span class="string">NAME</span>] [<span class="string">CHART</span>] [<span class="string">flags</span>]    <span class="comment"># 用于在本地渲染图表模板并显示输出</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="helm-3"></div></div></div>

<h4 id="Template模板文件"><a href="#Template模板文件" class="headerlink" title="Template模板文件"></a>Template模板文件</h4><p>所有模板文件都存储在 chart 的 templates&#x2F; 目录下面，当 Helm 渲染 charts 的时候，它将通过模板引擎传递该目录中的每个文件。模板的 Values 可以通过两种方式提供：</p>
<ul>
<li>Chart 开发人员可以在 chart 内部提供一个名为 values.yaml 的文件，该文件可以包含默认的 values 值内容。</li>
<li>Chart 用户可以提供包含 values 值的 YAML 文件，可以在命令行中通过 helm install 来指定该文件。<br>当用户提供自定义 values 值的时候，这些值将覆盖 chart 中 values.yaml 文件中的相应的值。</li>
</ul>
<h3 id="Charts文件结构"><a href="#Charts文件结构" class="headerlink" title="Charts文件结构"></a>Charts文件结构</h3><p>chart 被组织为一个目录中的文件集合，目录名称就是 chart 的名称（不包含版本信息）下面是一个 WordPress 的 chart  </p>
<div class="tabs" id="tab-second-helm"><ul class="nav-tabs"><li class="tab active"><a class="#second-helm-1">文件结构</a></li><li class="tab"><a class="#second-helm-2">charts.yaml示例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-helm-1"><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">wordpress/</span></span><br><span class="line">  <span class="string">Chart.yaml</span>                        <span class="comment"># 包含当前 chart 信息的 YAML 文件</span></span><br><span class="line">  <span class="string">LICENSE</span>                           <span class="comment"># 可选：包含 chart 的 license 的文本文件</span></span><br><span class="line">  <span class="string">README.md</span>                         <span class="comment"># 可选：一个可读性高的 README 文件</span></span><br><span class="line">  <span class="string">values.yaml</span>                       <span class="comment"># 当前 chart 的默认配置 values</span></span><br><span class="line">  <span class="string">values.schema.json</span>                <span class="comment"># 可选: 一个作用在 values.yaml 文件上的 JSON 模式</span></span><br><span class="line">  <span class="string">charts/</span>                           <span class="comment"># 包含该 chart 依赖的所有 chart 的目录</span></span><br><span class="line">  <span class="string">crds/</span>                             <span class="comment"># Custom Resource Definitions</span></span><br><span class="line">  <span class="string">templates/</span>                        <span class="comment"># 模板目录，与 values 结合使用时，将渲染生成 Kubernetes 资源清单文件</span></span><br><span class="line">  <span class="string">templates/NOTES.txt</span>               <span class="comment"># 可选: 包含简短使用使用的文本文件</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-helm-2"><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">chart</span> <span class="string">API</span> <span class="string">版本</span> <span class="string">(必须)</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">chart</span> <span class="string">名</span> <span class="string">(必须)</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">SemVer</span> <span class="number">2</span><span class="string">版本</span> <span class="string">(必须)</span></span><br><span class="line"><span class="attr">kubeVersion:</span> <span class="string">兼容的</span> <span class="string">Kubernetes</span> <span class="string">版本</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一句话描述</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">chart</span> <span class="string">类型</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">当前项目关键字集合</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">当前项目的</span> <span class="string">URL</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">sources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">当前项目源码</span> <span class="string">URL</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">dependencies:</span> <span class="comment"># chart 依赖列表 (可选)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">chart</span> <span class="string">名称</span> <span class="string">(nginx)</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">chart</span> <span class="string">版本</span> <span class="string">(&quot;1.2.3&quot;)</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">仓库地址</span> <span class="string">(&quot;https://example.com/charts&quot;)</span></span><br><span class="line"><span class="attr">maintainers:</span> <span class="comment"># (可选)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">维护者名字</span> <span class="string">(对每个</span> <span class="string">maintainer</span> <span class="string">是必须的)</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">维护者的</span> <span class="string">email</span> <span class="string">(可选)</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">维护者</span> <span class="string">URL</span> <span class="string">(可选)</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">chart</span> <span class="string">的</span> <span class="string">SVG</span> <span class="string">或者</span> <span class="string">PNG</span> <span class="string">图标</span> <span class="string">URL</span> <span class="string">(可选).</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="string">包含的应用程序版本</span> <span class="string">(可选).</span> <span class="string">不需要</span> <span class="string">SemVer</span> <span class="string">版本</span></span><br><span class="line"><span class="attr">deprecated:</span> <span class="string">chart</span> <span class="string">是否已被弃用</span> <span class="string">(可选,</span> <span class="string">boolean)</span></span><br></pre></td></tr></table></figure></div></div></div></div>



<h5 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h5><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deis-database</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">deis</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">deis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">deis-database</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">deis-database</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">deis-database</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deis-database</span></span><br><span class="line">          <span class="attr">image:</span> &#123;&#123; <span class="string">.Values.imageRegistry</span> &#125;&#125;<span class="string">/postgres:&#123;&#123;</span> <span class="string">.Values.dockerTag</span> <span class="string">&#125;&#125;</span>     <span class="comment"># docker镜像仓库 &amp;docker 镜像 TAG</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> &#123;&#123; <span class="string">.Values.pullPolicy</span> &#125;&#125;  <span class="comment"># 镜像拉取策略</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DATABASE_STORAGE</span></span><br><span class="line">              <span class="attr">value:</span> &#123;&#123; <span class="string">default</span> <span class="string">&quot;minio&quot;</span> <span class="string">.Values.storage</span> &#125;&#125;  <span class="comment"># 存储后端默认设置为 &#x27;minio&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="为模板提供一些必须的-values-值的-values-yaml-文件如下所示："><a href="#为模板提供一些必须的-values-值的-values-yaml-文件如下所示：" class="headerlink" title="为模板提供一些必须的 values 值的 values.yaml 文件如下所示："></a>为模板提供一些必须的 values 值的 values.yaml 文件如下所示：</h5><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">imageRegistry:</span> <span class="string">&quot;quay.io/deis&quot;</span></span><br><span class="line"><span class="attr">dockerTag:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="attr">pullPolicy:</span> <span class="string">&quot;Always&quot;</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">&quot;s3&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>values 文件的格式是 YAML，一个 chart 包可能包含一个默认的 values.yaml 文件，helm install 命令允许用户通过提供其他的 YAML 值文件来覆盖默认的值：</p>
<p><code>helm install --values=myvals.yaml wordpress</code><br>用这种方式来传递 values 值的时候，它们将合并到默认值文件中，比如有一个 myvals.yaml 文件如下所示：</p>
<p><code>storage: &quot;gcs&quot;</code><br>将其与 chart 的 values.yaml 文件合并后，得到的结果为：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">imageRegistry:</span> <span class="string">&quot;quay.io/deis&quot;</span></span><br><span class="line"><span class="attr">dockerTag:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="attr">pullPolicy:</span> <span class="string">&quot;Always&quot;</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">&quot;gcs&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>我们可以看到只有最后一个字段被覆盖了。</p>
]]></content>
      <categories>
        <category>Kubernetes-Operator</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm 模板开发</title>
    <url>/2023/03/26/Helm-%E6%A8%A1%E6%9D%BF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3>]]></content>
      <categories>
        <category>Kubernetes-Operator</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Zsh + oh-my-zsh 打造高效便捷的 shell 环境</title>
    <url>/2023/03/23/Linux-Zsh-%E4%BD%BF%E7%94%A8-oh-my-zsh-%E6%89%93%E9%80%A0%E9%AB%98%E6%95%88%E4%BE%BF%E6%8D%B7%E7%9A%84-shell-%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="安装Zsh"><a href="#安装Zsh" class="headerlink" title="安装Zsh"></a>安装Zsh</h3><p>Zsh 完全兼容 bash，支持强大的智能命令补全功能，支持大量的界面主题和插件，功能和效率都极大的增强和提高。</p>
<ul>
<li>CentOS: <code>yum -y install zsh</code></li>
<li>Ubunto: <code>apt install zsh</code></li>
</ul>
<h5 id="设置-默认-Shell-为-zsh"><a href="#设置-默认-Shell-为-zsh" class="headerlink" title="设置 默认 Shell 为 zsh"></a>设置 默认 Shell 为 zsh</h5><p><code>echo $shell</code>                   # 查看当前Shell<br><code>chsh -s /bin/zsh</code>              # 给 root 用户设置默认Shell<br><code>chsh -s /bin/zsh &lt;username&gt; </code>  # 给特定用户设置默认Shell<br>显示 <strong>“Changing shell for root”</strong> 则表示切换成功</p>
<hr>
<h3 id="安装-oh-my-zsh-amp-插件"><a href="#安装-oh-my-zsh-amp-插件" class="headerlink" title="安装 oh-my-zsh &amp; 插件"></a>安装 oh-my-zsh &amp; 插件</h3><p>这里我们采用自动安装，使用如下一键sh脚本<br><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>
<h5 id="修改主题样式"><a href="#修改主题样式" class="headerlink" title="修改主题样式"></a>修改主题样式</h5><p><code>vim .zshrc</code>                     #这里是当前路径<br><strong>ZSH_THEM</strong>字段就是主题（Passion）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323212915.png"
                      alt="link"
                ><br><em>基础样式可以查看这里: <a class="link"   href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" >https://github.com/ohmyzsh/ohmyzsh/wiki/Themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><br><em>额外主题可以查看这里: <a class="link"   href="https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes" >https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><br><strong>你还可以快速修改</strong> <code>sed -i &#39;/^ZSH_THEME=.*/c ZSH_THEME=&quot;themes&quot;&#39; ~/.zshrc &amp;&amp; source .zshrc</code></p>
<hr>
<h5 id="命令自动补全-zsh-completions"><a href="#命令自动补全-zsh-completions" class="headerlink" title="命令自动补全 zsh-completions"></a>命令自动补全 zsh-completions</h5><ul>
<li><p><strong>自动列出目录</strong><br>输入 <code>cd</code> 按 <strong>tab</strong> 键，目录将自动列出，在按 <strong>tab</strong> 可以切换</p>
</li>
<li><p><strong>自动目录名简写补全</strong><br>要访问 <code>/usr/local/bi</code>n 这个长路径，只需要 <code>cd /u/l/b</code> 按 <strong>tab</strong> 键自动补全</p>
</li>
<li><p><strong>自动大小写更正</strong><br>要访问 home 目录，只需要 <code>cd ho</code> 按 <strong>tab</strong> 键自动补全，或者查看 README.md，只需要 <code>cat rea</code> 自动更正补全</p>
</li>
<li><p><strong>自动命令补全</strong><br>输入 <code>kubectl</code> 按 <strong>tab</strong> 键即可看到可用命令</p>
</li>
<li><p><strong>自动补全命令参数</strong><br>输入 <code>kill</code> 按 <strong>tab</strong> 键会自动显示出进程的 <strong>process id</strong></p>
</li>
</ul>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-completions</span><br><span class="line">fpath+=<span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-completions/src </span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323223023.png"
                      alt="link"
                >  </p>
<h5 id="依据历史命令补全-zsh-autosuggestions"><a href="#依据历史命令补全-zsh-autosuggestions" class="headerlink" title="依据历史命令补全 zsh-autosuggestions"></a>依据历史命令补全 zsh-autosuggestions</h5><p>根据历史输入命令的记录即时的提示（建议补全），然后按 → 键即可补全</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span>/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">vim .zshrc              <span class="comment"># 添加插件名字 zsh-autosuggestions</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323222329.png"
                      alt="link"
                ></p>
<h5 id="语法高亮插件-zsh-syntax-highlighting"><a href="#语法高亮插件-zsh-syntax-highlighting" class="headerlink" title="语法高亮插件 zsh-syntax-highlighting"></a>语法高亮插件 zsh-syntax-highlighting</h5><p>命令错误会显示红色，直到你输入正确才会变绿色，另外路径正确会显示下划线</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">vim .zshrc              <span class="comment">#添加插件名字 zsh-syntax-highlighting</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230323222218.png"
                      alt="link"
                ></p>
]]></content>
      <categories>
        <category>Linux-System-Operator</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux sed 指令集</title>
    <url>/2023/03/20/Linux-sed-%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    <content><![CDATA[<div class="note-large notel-primary"><div class="notel-title"><p>Introduce</p>
</div><div class="notel-content"><p>sed命令是一种非常强大和灵活的文本处理工具，它可以让您快速地对文本进行各种编辑操作，而无需打开一个交互式的文本编辑器。sed命令可以在管道中使用，也可以直接修改原文件，非常适合批量处理大量的文本数据。sed命令还支持正则表达式，可以让您更精确地匹配和替换文本。如果您想要提高您的Linux技能和效率，那么学习sed命令是一个不错的选择。</p>
 </div></div>
<hr>
<h3 id="Sed常用指令"><a href="#Sed常用指令" class="headerlink" title="Sed常用指令"></a>Sed常用指令</h3><div class="tabs" id="tab-sed-tab"><ul class="nav-tabs"><li class="tab active"><a class="#sed-tab-1">参数说明</a></li><li class="tab"><a class="#sed-tab-2">使用实例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sed-tab-1"><ul>
<li>-a    新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li>
<li>-c    取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>-d    删除，因为是删除啊，所以 d 后面通常不接任何东东；</li>
<li>-i    插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>-p    打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li>
<li>-s    替换，可以直接进行替换！通常这个 s 的动作可以搭配正则表达式</li>
</ul></div><div class="tab-pane" id="sed-tab-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sed 5a\newline filename             <span class="comment"># 在filename文件第5行的下一行插入newline,将结果输出到标准输出</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;3,7d&#x27;</span>            <span class="comment"># &lt;nl&gt;带行号输出&lt;filename&gt;sed动作是删除&lt;d&gt; 3-7行,也可以夹带正则</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;8a after hello word&#x27;</span>         <span class="comment"># 在第八行的结尾加上 after hello word 字样</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed <span class="string">&#x27;8i first hello word&#x27;</span>         <span class="comment"># 在第八行前加上 first hello word 字样</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;3,8p&#x27;</span>                         <span class="comment"># 列出filename文件内的&lt;3-8&gt;行信息</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/p&#x27;</span>                     <span class="comment"># 列出filename文件有hello关键词的行</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/d&#x27;</span>                     <span class="comment"># 删除filename文件有hello关键词的行</span></span><br><span class="line"><span class="built_in">nl</span> filename | sed -n <span class="string">&#x27;/hello/&#123;s/hello/hi/;p;q&#125;/&#x27;</span>      <span class="comment">#找到hello关键词替换为hi &lt;q&gt;退出</span></span><br><span class="line">sed <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  filename    <span class="comment"># 替换filename文件中的&lt;Oldstring&gt;为&lt;Newstring&gt; &lt;g&gt;全局替换</span></span><br><span class="line">sed -i <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  filename          <span class="comment"># 使其修改生效</span></span><br><span class="line">sed -i <span class="string">&#x27;s/Oldstring/Newstring/g&#x27;</span>  path/to/file.*    <span class="comment">#批量替换目录下file开头的文件</span></span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <tags>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 入门到实践</title>
    <url>/2023/04/16/Nginx-%E5%85%A8%E6%A8%A1%E5%9D%97%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="Nginx-介绍"><a href="#Nginx-介绍" class="headerlink" title="Nginx 介绍"></a>Nginx 介绍</h3><p>传统的 Web 服务器，每个客户端连接作为一个单独的进程或线程处理，需在切换任务时将 CPU 切换到新的任务并创建一个新的运行时上下文，消耗额外的内存和 CPU 时间，当并发请求增加时，服务器响应变慢，从而对性能产生负面影响。</p>
<p>Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。</p>
<p>Nginx 的最重要的几个使用场景：</p>
<ul>
<li>静态资源服务，通过本地文件系统提供服务；</li>
<li>反向代理服务，延伸出包括缓存、负载均衡等；</li>
<li>API 服务，OpenResty；</li>
</ul>
<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">常用命令</a></li><li class="tab"><a class="#first-2">配置结构图</a></li><li class="tab"><a class="#first-3">典型配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -s reload  <span class="comment"># 向主进程发送信号，重新加载配置文件，热重启</span></span><br><span class="line">nginx -s reopen	 <span class="comment"># 重启 Nginx</span></span><br><span class="line">nginx -s stop    <span class="comment"># 快速关闭</span></span><br><span class="line">nginx -s quit    <span class="comment"># 等待工作进程处理完成后关闭</span></span><br><span class="line">nginx -T         <span class="comment"># 查看当前 Nginx 最终的配置</span></span><br><span class="line">nginx -t -c &lt;配置路径&gt;    <span class="comment"># 检查配置是否有问题，如果已经在配置目录，则不需要-c</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">main        <span class="comment"># 全局配置，对全局生效</span></span><br><span class="line">├── events  <span class="comment"># 配置影响 Nginx 服务器或与用户的网络连接</span></span><br><span class="line">├── http    <span class="comment"># 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置</span></span><br><span class="line">│   ├── upstream <span class="comment"># 配置后端服务器具体地址，负载均衡配置不可或缺的部分</span></span><br><span class="line">│   ├── server   <span class="comment"># 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块</span></span><br><span class="line">│   ├── server</span><br><span class="line">│   │   ├── location  <span class="comment"># server 块可以包含多个 location 块，location 指令用于匹配 uri</span></span><br><span class="line">│   │   ├── location</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-3"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">user  nginx;                        <span class="comment"># 运行用户，默认即是nginx，可以不进行设置</span></span><br><span class="line">worker_processes  1;                <span class="comment"># Nginx 进程数，一般设置为和 CPU 核数一样</span></span><br><span class="line">error_log  /var/log/nginx/error.log warn;   <span class="comment"># Nginx 的错误日志存放目录</span></span><br><span class="line">pid        /var/run/nginx.pid;      <span class="comment"># Nginx 服务启动时的 pid 存放位置</span></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;     <span class="comment"># 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)</span></span><br><span class="line">    worker_connections 1024;   <span class="comment"># 每个进程允许最大并发数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;   <span class="comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span></span><br><span class="line">    <span class="comment"># 设置日志模式</span></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;   <span class="comment"># Nginx访问日志存放位置</span></span><br><span class="line"></span><br><span class="line">    sendfile            on;   <span class="comment"># 开启高效传输模式</span></span><br><span class="line">    tcp_nopush          on;   <span class="comment"># 减少网络报文段的数量</span></span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;   <span class="comment"># 保持连接的时间，也叫超时时间，单位秒</span></span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;      <span class="comment"># 文件扩展名与类型映射表</span></span><br><span class="line">    default_type        application/octet-stream;   <span class="comment"># 默认文件类型</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;   <span class="comment"># 加载子配置项</span></span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">    	listen       80;       <span class="comment"># 配置监听的端口</span></span><br><span class="line">    	server_name  localhost;    <span class="comment"># 配置的域名</span></span><br><span class="line">    	</span><br><span class="line">    	location / &#123;</span><br><span class="line">    		root   /usr/share/nginx/html;  <span class="comment"># 网站根目录</span></span><br><span class="line">    		index  index.html index.htm;   <span class="comment"># 默认首页文件</span></span><br><span class="line">    		deny 172.168.22.11;   <span class="comment"># 禁止访问的ip地址，可以为all</span></span><br><span class="line">    		allow 172.168.33.44； <span class="comment"># 允许访问的ip地址，可以为all</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	error_page 500 502 503 504 /50x.html;  <span class="comment"># 默认50x对应的访问页面</span></span><br><span class="line">    	error_page 400 404 error.html;   <span class="comment"># 同上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server 块可以包含多个 location 块，location 指令用于匹配 uri：</span></span><br><span class="line">location [ = | ~ | ~* | ^~] uri &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>=</code>  精确匹配路径，用于不含正则表达式的 uri 前，如果匹配成功，不再进行后续的查找；<br><code>^~</code> 用于不含正则表达式的 uri 前，表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找；<br><code>~</code>  表示用该符号后面的正则去匹配路径，区分大小写；<br><code>~*</code> 表示用该符号后面的正则去匹配路径，不区分大小写。跟 ~ 优先级都比较低，如有多个location的正则能匹配的话，则使用正则表达式最长的那个；<br>如果 uri 包含正则表达式，则必须要有 <code>~</code> 或 <code>~*</code> 标志。</p>
<hr>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Describe</th>
</tr>
</thead>
<tbody><tr>
<td align="left">host</td>
<td align="left">请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口</td>
</tr>
<tr>
<td align="left">request_method</td>
<td align="left">客户端请求类型，如 GET、POST</td>
</tr>
<tr>
<td align="left">remote_addr</td>
<td align="left">客户端的 IP 地址</td>
</tr>
<tr>
<td align="left">args</td>
<td align="left">请求中的参数</td>
</tr>
<tr>
<td align="left">arg_PARAMETER</td>
<td align="left">GET 请求中变量名 PARAMETER 参数的值，例如：$http_user_agent(Uaer-Agent 值), $http_referer…</td>
</tr>
<tr>
<td align="left">content_length</td>
<td align="left">请求头中的 Content-length 字段</td>
</tr>
<tr>
<td align="left">http_user_agent</td>
<td align="left">客户端agent信息</td>
</tr>
<tr>
<td align="left">http_cookie</td>
<td align="left">客户端cookie信息</td>
</tr>
<tr>
<td align="left">remote_addr</td>
<td align="left">客户端的IP地址</td>
</tr>
<tr>
<td align="left">remote_port</td>
<td align="left">客户端的端口</td>
</tr>
<tr>
<td align="left">http_user_agent</td>
<td align="left">客户端agent信息</td>
</tr>
<tr>
<td align="left">server_protocol</td>
<td align="left">请求使用的协议，如 HTTP&#x2F;1.0、HTTP&#x2F;1.1</td>
</tr>
<tr>
<td align="left">server_addr</td>
<td align="left">服务器地址</td>
</tr>
<tr>
<td align="left">server_name</td>
<td align="left">服务器名称</td>
</tr>
<tr>
<td align="left">server_port</td>
<td align="left">服务器的端口号</td>
</tr>
<tr>
<td align="left">scheme	HTTP</td>
<td align="left">方法（如http，https）</td>
</tr>
</tbody></table>
<h3 id="配置一个反向代理"><a href="#配置一个反向代理" class="headerlink" title="配置一个反向代理"></a>配置一个反向代理</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/proxy.conf</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name proxy.theplan.space;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://cn.bing.com</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p><code>proxy_set_header</code>                在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息；<br><code>proxy_connect_timeout:</code>          配置 Nginx 与后端代理服务器尝试建立连接的超时时间；<br><code>proxy_read_timeout:</code>             配置 Nginx 向后端服务器组发出 read 请求后，等待相应的超时时间；<br><code>proxy_send_timeout:</code>             配置 Nginx 向后端服务器组发出 write 请求后，等待相应的超时时间；<br><code>proxy_redirect:</code>                 用于修改后端服务器返回的响应头中的 Location 和 Refresh。</p>
<h3 id="配置-gzip"><a href="#配置-gzip" class="headerlink" title="配置 gzip"></a>配置 gzip</h3><div class="tabs" id="tab-three"><ul class="nav-tabs"><li class="tab active"><a class="#three-1">gzip配置</a></li><li class="tab"><a class="#three-2">gzip 说明</a></li></ul><div class="tab-content"><div class="tab-pane active" id="three-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/gzip.conf</span></span><br><span class="line"></span><br><span class="line">gzip on; <span class="comment"># 默认off，是否开启gzip</span></span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面两个开启基本就能跑起了，下面的愿意折腾就了解一下</span></span><br><span class="line">gzip_static on;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_buffers 16 8k;</span><br><span class="line"><span class="comment"># gzip_min_length 1k;</span></span><br><span class="line">gzip_http_version 1.1;</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="three-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">gzip_types</span><br><span class="line"><span class="comment"># 要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；</span></span><br><span class="line"></span><br><span class="line">gzip_static</span><br><span class="line"><span class="comment"># 默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容；</span></span><br><span class="line"></span><br><span class="line">gzip_proxied</span><br><span class="line"><span class="comment"># 默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；</span></span><br><span class="line"></span><br><span class="line">gzip_vary</span><br><span class="line"><span class="comment"># 用于在响应消息头中添加 `Vary：Accept-Encoding`，使代理服务器根据请求头中的 `Accept-Encoding` 识别是否启用 gzip 压缩；</span></span><br><span class="line"></span><br><span class="line">gzip_comp_level：</span><br><span class="line"><span class="comment"># gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6；</span></span><br><span class="line"></span><br><span class="line">gzip_buffers</span><br><span class="line"><span class="comment"># 获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得；</span></span><br><span class="line"></span><br><span class="line">gzip_min_length</span><br><span class="line"><span class="comment"># 允许压缩的页面最小字节数，页面字节数从header头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；</span></span><br><span class="line"></span><br><span class="line">gzip_http_version</span><br><span class="line"><span class="comment"># 默认 1.1，启用 gzip 所需的 HTTP 最低版本；</span></span><br></pre></td></tr></table></figure></div></div></div></div>

<h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  upstream myserver &#123;</span><br><span class="line">  	<span class="comment"># ip_hash;  # ip_hash 方式</span></span><br><span class="line">    <span class="comment"># fair;   # fair 方式</span></span><br><span class="line">    server 127.0.0.1:8081;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">    server 127.0.0.1:8082 weight=10;  <span class="comment"># weight 方式，不写默认为 1</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">    	proxy_pass http://myserver;</span><br><span class="line">      proxy_connect_timeout 10;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>Nginx 提供了好几种分配方式，默认为轮询，就是轮流来。有以下几种分配方式</strong>:<br><strong>轮询</strong>:     默认方式，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务挂了，能自动剔除；<br><strong>weight</strong>:   权重分配，指定轮询几率，权重越高，在被访问的概率越大，用于后端服务器性能不均的情况；<br><strong>ip_hash</strong>:  每个请求按访问 IP 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决动态网页 session 共享问题。负载均衡每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的；<br><strong>fair</strong>（第三方）:   按后端服务器的响应时间分配，响应时间短的优先分配，依赖第三方插件 <strong>nginx-upstream-fair</strong>，需要先安装</p>
<h3 id="配置动静分离"><a href="#配置动静分离" class="headerlink" title="配置动静分离"></a>配置动静分离</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location /www/ &#123;</span><br><span class="line">  	root /data/;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location /image/ &#123;</span><br><span class="line">  	root /data/;</span><br><span class="line">    autoindex on;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<hr>
<p>方式主要有两种，一种 是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案。另外一种方法就是动态跟静态文件混合在一起发布， 通过 Nginx 配置来分开。</p>
<p>通过 <code>location</code> 指定不同的后缀名实现不同的请求转发。通过 <code>expires</code> 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个URL，发送一个请求，比对服务器该文件最后更新时间没有变化。则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p>
<h3 id="配置高可用"><a href="#配置高可用" class="headerlink" title="配置高可用"></a>配置高可用</h3><p>首先安装 keepalived，<code>yum install keepalived -y</code><br>然后编辑 <code>/etc/keepalived/keepalived.conf</code> 配置文件，并在配置文件中增加 <code>vrrp_script</code> 定义一个外围检测机制，并在 <code>vrrp_instance</code> 中通过定义 <code>track_script</code> 来追踪脚本执行过程，实现节点转移</p>
<div class="tabs" id="tab-second"><ul class="nav-tabs"><li class="tab active"><a class="#second-1">keeplived配置</a></li><li class="tab"><a class="#second-2">check-health</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">global_defs&#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">        acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30 // 上面都是邮件配置，没卵用</span><br><span class="line">   router_id LVS_DEVEL     // 当前服务器名字，用hostname命令来查看</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_maintainace &#123; // 检测机制的脚本名称为chk_maintainace</span><br><span class="line">    script <span class="string">&quot;[[ -e/etc/keepalived/down ]] &amp;&amp; exit 1 || exit 0&quot;</span> // 可以是脚本路径或脚本命令</span><br><span class="line">    // script <span class="string">&quot;/etc/keepalived/nginx_check.sh&quot;</span>    // 比如这样的脚本路径</span><br><span class="line">    interval 2  // 每隔2秒检测一次</span><br><span class="line">    weight -20  // 当脚本执行成立，那么把当前服务器优先级改为-20</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instanceVI_1 &#123;   // 每一个vrrp_instance就是定义一个虚拟路由器</span><br><span class="line">    state MASTER      // 主机为MASTER，备用机为BACKUP</span><br><span class="line">    interface eth0    // 网卡名字，可以从ifconfig中查找</span><br><span class="line">    virtual_router_id 51 // 虚拟路由的<span class="built_in">id</span>号，一般小于255，主备机<span class="built_in">id</span>需要一样</span><br><span class="line">    priority 100      // 优先级，master的优先级比backup的大</span><br><span class="line">    advert_int 1      // 默认心跳间隔</span><br><span class="line">    authentication &#123;  // 认证机制</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111   // 密码</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;  // 虚拟地址vip</span><br><span class="line">       172.16.2.8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C nginx --no-header | <span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    /usr/sbin/nginx <span class="comment"># 尝试重新启动nginx</span></span><br><span class="line">    <span class="built_in">sleep</span> 2         <span class="comment"># 睡眠2秒</span></span><br><span class="line">    <span class="keyword">if</span> [ `ps -C nginx --no-header | <span class="built_in">wc</span> -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        killall keepalived <span class="comment"># 启动失败，将keepalived服务杀死。将vip漂移到其它备份节点</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></div></div></div></div>

<hr>
<p>复制一份到备份服务器，备份 Nginx 的配置要将 <code>state</code> 后改为 <code>BACKUP</code>，<code>priority</code> 改为比主机小。<br>设置完毕后各自 <code>service keepalived start</code> 启动，经过访问成功之后，可以把 Master 机的 <code>keepalived</code> 停掉，此时 Master 机就不再是主机了 <code>service keepalived stop</code>，看访问虚拟 IP 时是否能够自动切换到备机 <code>ip addr</code>。<br>再次启动 Master 的 keepalived，此时 <code>vip</code> 又变到了主机上。</p>
<h3 id="HTTPS配置"><a href="#HTTPS配置" class="headerlink" title="HTTPS配置"></a>HTTPS配置</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl http2 default_server;   <span class="comment"># SSL 访问端口号为 443</span></span><br><span class="line">  server_name proxy.theplan.space;         <span class="comment"># 填写绑定证书的域名</span></span><br><span class="line"></span><br><span class="line">  ssl_certificate /etc/nginx/https/your_crt.crt;   <span class="comment"># 证书文件地址</span></span><br><span class="line">  ssl_certificate_key /etc/nginx/https/your_key.key;      <span class="comment"># 私钥文件地址</span></span><br><span class="line">  ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;      <span class="comment">#请按照以下协议配置</span></span><br><span class="line">  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line">    index        index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>提高安全性</strong></p>
<ul>
<li>add_header X-Frame-Options DENY;           # 减少点击劫持</li>
<li>add_header X-Content-Type-Options nosniff; # 禁止服务器自动解析资源类型</li>
<li>add_header X-Xss-Protection 1;             # 防XSS攻击</li>
</ul>
<h3 id="Nginx指标可用性"><a href="#Nginx指标可用性" class="headerlink" title="Nginx指标可用性"></a>Nginx指标可用性</h3><table>
<thead>
<tr>
<th align="left">NAME</th>
<th align="left">Describe</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>accepts</code></td>
<td align="left">（接受） &#x2F; accepted（已接受）</td>
</tr>
<tr>
<td align="left"><code>handled</code></td>
<td align="left">（已处理）</td>
</tr>
<tr>
<td align="left"><code>dropped</code></td>
<td align="left">（已丢弃）</td>
</tr>
<tr>
<td align="left"><code>active </code></td>
<td align="left">（活跃）</td>
</tr>
<tr>
<td align="left"><code>request</code></td>
<td align="left">（请求数）&#x2F; total（全部请求数）</td>
</tr>
<tr>
<td align="left"><code>4xx 代</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>5xx 代</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>request time</code></td>
<td align="left">（请求处理时间）</td>
</tr>
</tbody></table>
<h3 id="配置-stub-status模块"><a href="#配置-stub-status模块" class="headerlink" title="配置 stub status模块"></a>配置 stub status模块</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查模块是否启用</span></span><br><span class="line">nginx -V 2&gt;&amp;1 | grep -o with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    location /nginx_status &#123;</span><br><span class="line">        stub_status on;             <span class="comment"># 开启模块</span></span><br><span class="line">        allow 127.0.0.1;            <span class="comment"># 添加白名单</span></span><br><span class="line">        deny all;                   <span class="comment"># 拒绝 all访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证文件</span></span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">systemctl restart nginx </span><br></pre></td></tr></table></figure></div>
<h5 id="查看前端结果"><a href="#查看前端结果" class="headerlink" title="查看前端结果"></a>查看前端结果</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230416095800.png"
                      alt="link"
                ></p>
<h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><h5 id="静态服务"><a href="#静态服务" class="headerlink" title="静态服务"></a>静态服务</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  static.theplan.space;</span><br><span class="line">  charset utf-8;    <span class="comment"># 防止中文文件名乱码</span></span><br><span class="line"></span><br><span class="line">  location /download &#123;</span><br><span class="line">    <span class="built_in">alias</span>	          /usr/share/nginx/html/static;  <span class="comment"># 静态资源目录</span></span><br><span class="line">    </span><br><span class="line">    autoindex               on;    <span class="comment"># 开启静态资源列目录</span></span><br><span class="line">    autoindex_exact_size    off;   <span class="comment"># on(默认)显示文件的确切大小，单位是byte；off显示文件大概大小，单位KB、MB、GB</span></span><br><span class="line">    autoindex_localtime     off;   <span class="comment"># off(默认)时显示的文件时间为GMT时间；on显示的文件时间为服务器时间</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;        </span><br><span class="line">  server_name  *.theplan.space theplan.space;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 图片防盗链</span></span><br><span class="line">  location ~* \.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">    valid_referers none blocked server_names ~\.google\. ~\.baidu\. *.qq.com;  <span class="comment"># 只允许本机 IP 外链引用，感谢 @木法传 的提醒，将百度和谷歌也加入白名单</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line">      <span class="built_in">return</span> 403;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="请求过滤"><a href="#请求过滤" class="headerlink" title="请求过滤"></a>请求过滤</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 非指定请求全返回 403</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$request_method</span> !~ ^(GET|POST|HEAD)$ ) &#123;</span><br><span class="line">  <span class="built_in">return</span> 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">  <span class="comment"># IP访问限制（只允许IP是 192.168.0.2 机器访问）</span></span><br><span class="line">  allow 192.168.0.2;</span><br><span class="line">  deny all;</span><br><span class="line">  </span><br><span class="line">  root   html;</span><br><span class="line">  index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="配置图片、字体等静态文件缓存"><a href="#配置图片、字体等静态文件缓存" class="headerlink" title="配置图片、字体等静态文件缓存"></a>配置图片、字体等静态文件缓存</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于图片、字体、音频、视频等静态文件在打包的时候通常会增加了 hash，所以缓存可以设置的长一点，先设置强制缓存，再设置协商缓存；如果存在没有 hash 值的静态文件，建议不设置强制缓存，仅通过协商缓存判断是否需要使用缓存。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片缓存时间设置</span></span><br><span class="line">location ~ .*\.(css|js|jpg|png|gif|swf|woff|woff2|eot|svg|ttf|otf|mp3|m4a|aac|txt)$ &#123;</span><br><span class="line">	expires 10d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不希望缓存</span></span><br><span class="line">expires -1;</span><br><span class="line">15.5 单页面项目 <span class="built_in">history</span> 路由配置</span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  fe.theplan.space;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    root       /usr/share/nginx/html/dist;  <span class="comment"># vue 打包后的文件夹</span></span><br><span class="line">    index      index.html index.htm;</span><br><span class="line">    try_files  <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html @rewrites;  </span><br><span class="line">    </span><br><span class="line">    expires -1;                          <span class="comment"># 首页一般没有强制缓存</span></span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 接口转发，如果需要的话</span></span><br><span class="line">  <span class="comment">#location ~ ^/api &#123;</span></span><br><span class="line">  <span class="comment">#  proxy_pass http://be.theplan.space;</span></span><br><span class="line">  <span class="comment">#&#125;</span></span><br><span class="line">  </span><br><span class="line">  location @rewrites &#123;</span><br><span class="line">    rewrite ^(.+)$ /index.html <span class="built_in">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="HTTP-请求转发到-HTTPS"><a href="#HTTP-请求转发到-HTTPS" class="headerlink" title="HTTP 请求转发到 HTTPS"></a>HTTP 请求转发到 HTTPS</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置完 HTTPS 后，浏览器还是可以访问 HTTP 的地址 http://theplan.space/ 的，可以做一个 301 跳转，把对应域名的 HTTP 请求重定向到 HTTPS 上</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name www.theplan.space;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单域名重定向</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$host</span> = <span class="string">&#x27;www.theplan.space&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://www.theplan.space<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 全局非 https 协议时重定向</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scheme</span> != <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 或者全部重定向</span></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以上配置选择自己需要的即可，不用全部加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="泛域名路径分离"><a href="#泛域名路径分离" class="headerlink" title="泛域名路径分离"></a>泛域名路径分离</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个非常实用的技能，经常有时候我们可能需要配置一些二级或者三级域名，希望通过 Nginx 自动指向对应目录，比如：</span></span><br><span class="line"></span><br><span class="line">test1.doc.theplan.space 自动指向 /usr/share/nginx/html/doc/test1 服务器地址；</span><br><span class="line">test2.doc.theplan.space 自动指向 /usr/share/nginx/html/doc/test2 服务器地址；</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ~^([\w-]+)\.doc\.sherlocked93\.club$;</span><br><span class="line"></span><br><span class="line">    root /usr/share/nginx/html/doc/<span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="泛域名转发"><a href="#泛域名转发" class="headerlink" title="泛域名转发"></a>泛域名转发</h5><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 和之前的功能类似，有时候我们希望把二级或者三级域名链接重写到我们希望的路径，让后端就可以根据路由解析不同的规则：</span></span><br><span class="line"></span><br><span class="line">test1.serv.theplan.space/api?name=a 自动转发到 127.0.0.1:8080/test1/api?name=a；</span><br><span class="line">test2.serv.theplan.space/api?name=a 自动转发到 127.0.0.1:8080/test2/api?name=a ；</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name ~^([\w-]+)\.serv\.sherlocked93\.club$;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header        Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header        X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        proxy_pass              http://127.0.0.1:8080/$1<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Middle-Operator</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Scoop打造windows上应用源仓库</title>
    <url>/2023/04/01/Scoop%E6%89%93%E9%80%A0windows%E4%B8%8A%E5%BA%94%E7%94%A8%E6%BA%90%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h4 id="Scoop-了解"><a href="#Scoop-了解" class="headerlink" title="Scoop 了解"></a>Scoop 了解</h4><ul>
<li>Scoop 是个优质的 Windows 包管理器。它不仅轻量，还将软件直接安装到我们的用户目录下，安程不需要申请管理员权限（UAC）也不会污染系统环境变量。</li>
<li>Scoop 官网：<a class="link"   href="https://www.scoop.sh/" >https://www.scoop.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Scoop 仓库：<a class="link"   href="https://github.com/ScoopInstaller/Scoop" >https://github.com/ScoopInstaller/Scoop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<hr>
<h4 id="Scoop-应用场景"><a href="#Scoop-应用场景" class="headerlink" title="Scoop 应用场景"></a>Scoop 应用场景</h4><ul>
<li>重装系统或新电脑装了window</li>
<li>批量安装程序</li>
<li>多线程下载</li>
</ul>
<hr>
<h4 id="Scoop-安装-amp-环境要求"><a href="#Scoop-安装-amp-环境要求" class="headerlink" title="Scoop 安装&amp;环境要求"></a>Scoop 安装&amp;环境要求</h4><ul>
<li>用户名不含中文</li>
<li>PowerShell 7+</li>
<li>Windows10 1607+ &#x2F; Windows Server 2012+</li>
<li>.Net Framework 4.5+</li>
</ul>
<hr>
<h4 id="Scoop-配置"><a href="#Scoop-配置" class="headerlink" title="Scoop 配置"></a>Scoop 配置</h4><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br><span class="line"><span class="comment"># irm -useb get.scoop.sh | iex</span></span><br><span class="line">irm https://ghproxy.com/raw.githubusercontent.com/lzwme/scoop-proxy-cn/master/install.ps1 | iex</span><br><span class="line"></span><br><span class="line"><span class="comment"># config</span></span><br><span class="line">scoop config SCOOP_REPO https://ghproxy.com/github.com/ScoopInstaller/Scoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git ，不然后面无法拉取仓库</span></span><br><span class="line">scoop install  7zip aria2 git        </span><br><span class="line"></span><br><span class="line">scoop bucket <span class="built_in">rm</span> main</span><br><span class="line"><span class="comment"># scoop bucket add main https://ghproxy.com/github.com/ScoopInstaller/Main</span></span><br><span class="line">scoop bucket add spc https://ghproxy.com/https://github.com/lzwme/scoop-proxy-cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># show help</span></span><br><span class="line">scoop <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必备应用： scoop-search、aria2...</span></span><br><span class="line">scoop install spc/scoop-search spc/aria2</span><br></pre></td></tr></table></figure></div>

<p><code>安装好进入 &quot;C:\Users\&#123;$user&#125;\scoop&quot;</code></p>
<p>1.目录说明：</p>
<ul>
<li>apps 存放已安装的工具。</li>
<li>buckets 存放添加的源仓库。其中 buckets&#x2F;main 为官方源。</li>
<li>cache 下载的安装包缓存。若长久使用后占用空间太大了可以清理掉。</li>
<li>shims 已安装工具的入口文件。</li>
</ul>
<hr>
<p>2.其他说明：</p>
<ul>
<li>如果安装时指定了 –global 参数，则安装的位置为：C:\ProgramData\scoop。</li>
<li>可设置环境变量 SCOOP 指定当前用户默认安装的位置。</li>
<li>可设置环境变量 SCOOP_GLOBAL 指定全局默认安装的位置。</li>
<li>当我们想要找指定APP时有没有仓库存在，我们可以使用Google搜索 [AppName + scoop]</li>
</ul>
<hr>
<p>3.添加其它<strong>buckets</strong>软件库：</p>
<ul>
<li>scoop bucket known 列出已安装的 bucket</li>
<li>scoop bucket add <bucketname> 添加一个 bucket</li>
<li>scoop bucket rm <bucketname> 删除一个 bucket</li>
</ul>
<hr>
<p>4.Scoop基本指令：</p>
<ul>
<li>查找：scoop-search rust 从本地 buckets 中查找包(rust)</li>
<li>查看：scoop info rust 查看一个包的基本信息（rust）</li>
<li>安装：scoop install rust 安装一个包(rust)</li>
<li>卸载：scoop uninstall rust 卸载一个包(rust)</li>
<li>更新：scoop update [rust] 更新一个或全部包(rust)</li>
</ul>
<hr>
<div class="tabs" id="tab-scoop"><ul class="nav-tabs"><li class="tab active"><a class="#scoop-1">安装示例</a></li><li class="tab"><a class="#scoop-2">简单示例</a></li><li class="tab"><a class="#scoop-3">可选应用</a></li></ul><div class="tab-content"><div class="tab-pane active" id="scoop-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 sudo 全局安装需要系统管理员权限的应用</span></span><br><span class="line">scoop install sudo</span><br><span class="line">sudo scoop install 7zip git openssh --global</span><br><span class="line"></span><br><span class="line">scoop install aria2 curl grep sed less <span class="built_in">touch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装常见编程开发语言支持</span></span><br><span class="line">scoop install python ruby go perl rust php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Linux 命令行 gow</span></span><br><span class="line">scoop install gow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 cmder</span></span><br><span class="line">scoop install cmder</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="scoop-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">scoop list                           <span class="comment"># 查看已安装程序</span></span><br><span class="line"></span><br><span class="line">scoop status                        <span class="comment"># 查看更新</span></span><br><span class="line"></span><br><span class="line">scoop checkup                        <span class="comment"># 自身诊断</span></span><br><span class="line"></span><br><span class="line">scoop hold &lt;softname&gt;               <span class="comment"># 软件暂停更新</span></span><br><span class="line"></span><br><span class="line">scoop reset &lt;softname@版本号&gt;       <span class="comment"># 切换到指定版本</span></span><br><span class="line"></span><br><span class="line">scoop reset *                        <span class="comment"># 重置所有软件链接及图标</span></span><br><span class="line"></span><br><span class="line">scoop cache <span class="built_in">rm</span> *                    <span class="comment"># 删除缓存软件包</span></span><br><span class="line"></span><br><span class="line">scoop cleanup <span class="built_in">rm</span> *                  <span class="comment"># 删除旧版本</span></span><br><span class="line"></span><br><span class="line">scoop home &lt;app_name&gt;               <span class="comment"># 打开应用主页(homepage)</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="scoop-3"><div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">7zip                压缩与解压工具</span><br><span class="line"></span><br><span class="line">aria2               让 scoop 在批量安装多个应用时，以多进程模式并发下载和安装</span><br><span class="line"></span><br><span class="line">NetEaseMusic        网易云音乐</span><br><span class="line"></span><br><span class="line">WeChatWork          企业微信</span><br><span class="line"></span><br><span class="line">wechat              微信</span><br><span class="line"></span><br><span class="line">utools              新一代效率工具平台，插件即应用。</span><br><span class="line"></span><br><span class="line">fscapture           轻量好用的截图工具</span><br><span class="line"></span><br><span class="line">Tencent-Meeting     腾讯会议</span><br><span class="line"></span><br><span class="line">Xshell	            好用的SSH/Telnet等协议连接工具</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="定制私有仓库"><a href="#定制私有仓库" class="headerlink" title="定制私有仓库"></a>定制私有仓库</h4><ul>
<li><p>参考以下项目仓库克隆至本地<br><code>git clone https://github.com/duzyn/scoop-cn.git</code></p>
</li>
<li><p>进入 my-bucket <code>cd my-bucket</code><br><strong>创建 App 的安装配置文件 7zip.json</strong>(参数详解<a class="link"   href="https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests" >App-Manifests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)  </p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;22.01&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A multi-format file archiver with high compression ratios&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.7-zip.org/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LGPL-2.1-or-later&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;notes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Add 7-Zip as a context menu option by running: \&quot;$dir\\install-context.reg\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;64bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z2201-x64.msi&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f4afba646166999d6090b5beddde546450262dc595dddeb62132da70f70d14ca&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;extract_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Files\\7-Zip&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;32bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z2201.msi&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a4913f98821e0da0c58cd3a7f2a59f1834b85b6ca6b3fdefa5454d6c3bbef54c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;extract_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Files\\7-Zip&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;arm64&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z2201-arm64.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;700dea3e4012319a09ccadfce91cf090334cfe658d0bdc42204e77acbea1ef99&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pre_install&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$7zr = Join-Path $env:TMP &#x27;7zr.exe&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Invoke-WebRequest https://experiments-alicdn.sparanoid.net/7z/7zr.exe -OutFile $7zr&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Invoke-ExternalCommand $7zr @(&#x27;x&#x27;, \&quot;$dir\\$fname\&quot;, \&quot;-o$dir\&quot;, &#x27;-y&#x27;) | Out-Null&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Remove-Item \&quot;$dir\\Uninstall.exe\&quot;, \&quot;$dir\\*-arm64.exe\&quot;, $7zr&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;post_install&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$7zip_root = \&quot;$dir\&quot;.Replace(&#x27;\\&#x27;, &#x27;\\\\&#x27;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&#x27;install-context.reg&#x27;, &#x27;uninstall-context.reg&#x27; | ForEach-Object &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    $content = Get-Content \&quot;$bucketsdir\\main\\scripts\\7-zip\\$_\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    $content = $content.Replace(&#x27;$7zip_root&#x27;, $7zip_root)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    if ($global) &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;       $content = $content.Replace(&#x27;HKEY_CURRENT_USER&#x27;, &#x27;HKEY_LOCAL_MACHINE&#x27;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;    Set-Content \&quot;$dir\\$_\&quot; $content -Encoding Ascii&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;7z.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;7zFM.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;7zG.exe&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;shortcuts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;7zFM.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;7-Zip&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;persist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Codecs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Formats&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkver&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.7-zip.org/download.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;regex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Download 7-Zip ([\\d.]+)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoupdate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;64bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z$cleanVersion-x64.msi&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;32bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z$cleanVersion.msi&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arm64&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://experiments-alicdn.sparanoid.net/7z/7z$cleanVersion-arm64.exe&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>将本地更改同步至 GitHub</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add 7zip app&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div></li>
<li><p>添加你的bucket库<br><code>scoop bucket add my-bucket https://github.com/&lt;你的 GitHub 用户名&gt;/my-bucket</code></p>
</li>
<li><p>测试是否成功<br><code>scoop install &lt;仓库名&gt;/7zip</code></p>
</li>
</ul>
<div class="note-large notel-blue"><div class="notel-title"><p>精选的第三方仓库参考(适用于国内)</p>
</div><div class="notel-content"><p><a class="link"   href="https://github.com/scoopcn/scoopcn" >https://github.com/scoopcn/scoopcn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/kkzzhizhou/scoop-apps" >https://github.com/kkzzhizhou/scoop-apps <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/Paxxs/Cluttered-bucket" >https://github.com/Paxxs/Cluttered-bucket <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/duzyn/scoop-cn" >https://github.com/duzyn/scoop-cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
 </div></div>]]></content>
      <categories>
        <category>Windows-Operator</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Scoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的URLlib模块</title>
    <url>/2023/04/14/Python%E7%9A%84URLlib%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm 安装kubernetes(v1.24) debian 11</title>
    <url>/2023/04/15/kubeadm-%E5%AE%89%E8%A3%85kubernetes-v1-24-debian-11/</url>
    <content><![CDATA[<div class="note-large notel-primary"><div class="notel-title"><p>说明</p>
</div><div class="notel-content"><p>以下命令都是基于 root用户执行，所以没有加 提权命令，如果你不是root 请加上 <code>sudu</code>或者使用<code>su root</code>，由于服务器环境配置需要所有节点进行执行，推荐使用Xshell的 <font color="	#FF7F24">“发送键输入到所有会话功能”</font>，这样可以在一台机器上执行命令，多台服务器同时执行（快捷键<code>ctrl + shift + A</code>）</p>
 </div></div>

<h3 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h3><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">IPADDR</th>
<th align="center">SYSTEM</th>
</tr>
</thead>
<tbody><tr>
<td align="center">k8s-master-01</td>
<td align="center">172.16.10.101</td>
<td align="center">Debian 11</td>
</tr>
<tr>
<td align="center">k8s-worker-01</td>
<td align="center">172.16.10.221</td>
<td align="center">Debian 11</td>
</tr>
<tr>
<td align="center">k8s-worker-02</td>
<td align="center">172.16.10.222</td>
<td align="center">Debian 11</td>
</tr>
</tbody></table>
<h3 id="服务器环境配置（所有节点执行）"><a href="#服务器环境配置（所有节点执行）" class="headerlink" title="服务器环境配置（所有节点执行）"></a>服务器环境配置（所有节点执行）</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 ssh可以远程登录 root</span></span><br><span class="line">sed -i <span class="string">&#x27;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 ssh</span></span><br><span class="line">systemctl restart ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Linux交换分区，提升 kubernetes性能</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -ri <span class="string">&#x27;/\sswap\s/s/^#?/#/&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 k8s-master-01执行</span></span><br><span class="line">hostnamectl --static set-hostname k8s-master-01 &amp;&amp; bash</span><br><span class="line"><span class="comment"># 在 k8s-worker-01执行</span></span><br><span class="line">hostnamectl --static set-hostname k8s-worker-01 &amp;&amp; bash</span><br><span class="line"><span class="comment"># 在 k8s-worker-02执行</span></span><br><span class="line">hostnamectl --static set-hostname k8s-worker-02 &amp;&amp; bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># hosts配置 </span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF </span></span><br><span class="line"><span class="string">172.16.10.101 k8s-master-01</span></span><br><span class="line"><span class="string">172.16.10.221 k8s-worker-01</span></span><br><span class="line"><span class="string">172.16.10.222 k8s-worker-02</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转发 IPv4 并让 iptables 看到桥接流量 </span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF |  tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF |  tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 sysctl 参数而不重新启动</span></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过运行以下指令确认 br_netfilter 和 overlay 模块被加载：</span></span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line">lsmod | grep overlay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过运行以下指令确认 net.bridge.bridge-nf-call-iptables、net.bridge.bridge-nf-call-ip6tables和 net.ipv4.ip_forward系统变量在你的sysctl配置中被设置为 1：</span></span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward</span><br></pre></td></tr></table></figure></div>

<h3 id="安装docker-amp-contaianerd"><a href="#安装docker-amp-contaianerd" class="headerlink" title="安装docker &amp; contaianerd"></a>安装docker &amp; contaianerd</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载docker和containerd</span></span><br><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg</span><br><span class="line"></span><br><span class="line">install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg |  gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">   <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最新稳定版本</span></span><br><span class="line"> apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="配置-CRI（二选一）"><a href="#配置-CRI（二选一）" class="headerlink" title="配置 CRI（二选一）"></a>配置 CRI（二选一）</h3><div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">Docker CRI</a></li><li class="tab"><a class="#first-2">Containerd CRI</a></li><li class="tab"><a class="#first-3">CRI-Dockerd</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &quot;bip&quot;: &quot;172.18.97.1/24&quot;, 查看内网IP是否和docker默认网段(172.16.0.1/16)有冲突，如有冲突需要单独配置 bip替换有冲突的网段，请注意bip是写主机地址而不是网络地址</span></span><br><span class="line"><span class="comment"># 我用的是中国科技大镜像加速站，你也可以替换为其它镜像源</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF |  tee /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;],  </span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">  &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"> systemctl daemon-reload</span><br><span class="line"> systemctl restart docker</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># containerd安装如上docker所示</span></span><br><span class="line"><span class="comment"># 配置containerd，修改sandbox_image 镜像源</span></span><br><span class="line"><span class="comment"># 导出默认配置，config.toml这个文件默认是不存在的</span></span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改前检查</span></span><br><span class="line">grep sandbox_image  /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改sandbox_image 镜像源</span></span><br><span class="line">sed -i <span class="string">&quot;s#registry.k8s.io/pause#registry.aliyuncs.com/google_containers/pause#g&quot;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后检查</span></span><br><span class="line">grep sandbox_image  /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置containerd cgroup 驱动程序systemd</span></span><br><span class="line"><span class="comment"># 把SystemdCgroup = false修改为：SystemdCgroup = true，</span></span><br><span class="line">sed -i <span class="string">&#x27;s/SystemdCgroup = false/SystemdCgroup = true/g&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Containerd配置镜像加速</span></span><br><span class="line">vim /etc/containerd/config.toml</span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">          endpoint = [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span> ,<span class="string">&quot;https://registry-1.docker.io&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now containerd</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-3"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装cri-dockerd</span></span><br><span class="line">wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.1/cri-dockerd_0.3.1.3-0.debian-buster_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># unix:///var/run/cri-dockerd.sock</span></span><br><span class="line"><span class="comment"># systemd的服务地址 /lib/systemd/system/cri-dockerd.service</span></span><br><span class="line">dpkg -i cri-dockerd_0.3.1.3-0.debian-buster_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像地址为国内，否则kubelet拉取不了镜像导致启动失败</span></span><br><span class="line"><span class="comment"># 重载沙箱（pause）镜像 可执行命令 kubeadm config images list 查看国内阿里云最新沙箱镜像</span></span><br><span class="line">vim /lib/systemd/system/cri-docker.service</span><br><span class="line">ExecStart=/usr/bin/cri-dockerd --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9 --container-runtime-endpoint fd://</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> cri-docker.service</span><br><span class="line">systemctl <span class="built_in">enable</span> --now cri-docker.socket</span><br></pre></td></tr></table></figure></div></div></div></div>

<h3 id="更换-kubernetes源"><a href="#更换-kubernetes源" class="headerlink" title="更换 kubernetes源"></a>更换 kubernetes源</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">apt install -y apt-transport-https ca-certificates curl</span><br><span class="line"></span><br><span class="line">curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&quot;</span> |  <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure></div>

<h3 id="安装指定版本kubeadm"><a href="#安装指定版本kubeadm" class="headerlink" title="安装指定版本kubeadm"></a>安装指定版本kubeadm</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装kubeadm &amp; kubelet &amp; kubectl</span></span><br><span class="line">apt install -y kubeadm=1.24.12-00 kubelet=1.24.12-00 kubectl=1.24.12-00</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证版本是否正确</span></span><br><span class="line">kubeadm version</span><br><span class="line">kubectl version --client</span><br><span class="line">kubectl version --short</span><br><span class="line"></span><br><span class="line"><span class="comment"># 避免意外升级导致版本错误</span></span><br><span class="line">apt-mark hold kubeadm kubelet kubectl</span><br></pre></td></tr></table></figure></div>


<h3 id="控制面节点初始化-master"><a href="#控制面节点初始化-master" class="headerlink" title="控制面节点初始化(master)"></a>控制面节点初始化(master)</h3><p>kubeadm 的用法非常简单，只需要一个命令 kubeadm init 就可以把组件在 Master 节点上运行起来，不过它还有很多参数用来调整集群的配置，你可以用 -h 查看。这里说下几个重点参数：</p>
<ul>
<li><code>--pod-network-cidr</code>，设置集群里 Pod 的 IP 地址段。</li>
<li><code>--service-cidr</code>，设置集群里 Service 的 IP 地址段。默认：10.96.0.0&#x2F;12</li>
<li><code>--apiserver-advertise-address</code>，设置 apiserver 的 IP 地址，对于多网卡服务器来说很重要（比如 VirtualBox 虚拟机就用* 了两块网卡），可以指定 apiserver 在哪个网卡上对外提供服务。</li>
<li><code>--kubernetes-version</code>，指定 Kubernetes 的版本号。<br>下面的这个安装命令里，我指定了 Pod的地址段是 10.96.0.0&#x2F;12<br>apiserver 的服务地址是 172.16.10.101，Kubernetes的版本号是 1.24.12</li>
</ul>
<hr>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line"> --apiserver-advertise-address=172.16.10.101 \</span><br><span class="line"> --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line"> --kubernetes-version v1.24.12 \</span><br><span class="line"> --service-cidr=10.96.0.0/12 \</span><br><span class="line"> --pod-network-cidr=10.12.9.0/16 \</span><br><span class="line"> --v=5</span><br></pre></td></tr></table></figure></div>

<div class="note-large notel-info"><div class="notel-title"><p>说明</p>
</div><div class="notel-content"><p><code>--cri-socket=unix:///var/run/cri-dockerd.sock</code> 如果使用 containerd 作为CRI，就不需要加上该参数。<br>如果使用 docker 作为CRI就需要加上 <code>--cri-socket</code> 参数，同时还必须提前安装 <code>cri-dockerd</code> 后，再初始化一个 Kubernetes 控制平面节点(master)。</p>
<p><code>--image-repository</code> 加上国内阿里云镜像仓库会快很多，不然默认使用谷歌的，会很慢，一直在init阶段，初始化不成功</p>
 </div></div>

<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件方式 当前用户</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量方式 临时生效（退出当前窗口重连环境变量失效）</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量方式 永久生效（推荐）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span>  ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取目前已有的token，如果没用，说明所有的token都失效了</span></span><br><span class="line">kubeadm token list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，令牌会在 24 小时后过期。如果要在当前令牌过期后将节点加入集群， 则可以通过在控制平面节点上运行以下命令来创建新令牌：</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可生成永久token，不建议这样做</span></span><br><span class="line">kubeadm token create --ttl 0 --print-join-command</span><br></pre></td></tr></table></figure></div>
<div class="note-large notel-warning"><div class="notel-title"><p>提示</p>
</div><div class="notel-content"><p>如果使用 docker 作为 CRI时，其他节点加入集群需要添加 –cri-socket 参数, Like this<br><code>kubeadm join ......  --cri-socket=unix:///var/run/cri-dockerd.sock</code></p>
 </div></div>

<h3 id="加入Worker节点（worker执行）"><a href="#加入Worker节点（worker执行）" class="headerlink" title="加入Worker节点（worker执行）"></a>加入Worker节点（worker执行）</h3><p><code>kubeadm join 172.16.10.101:6443 --token xi7hnt.0e2i9xqauw7pccxf 	--discovery-token-ca-cert-hash sha256:63235175aa2ec145685a8b905c69d47327aaaf1e2dd2dddc9b615259fe9ad1ba</code></p>
<h3 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h3><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载kube-flannel.yml</span></span><br><span class="line">wget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改podCIDR</span></span><br><span class="line">vim kube-flannel.yml </span><br><span class="line"></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.12.9.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过yaml文件部署kube-flannel</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure></div>
<h3 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230415232546.png"
                      alt="link"
                ></p>
]]></content>
      <categories>
        <category>Kubernetes-Operator</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着AI学Python(day1)</title>
    <url>/2023/04/05/python-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AFday1/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>刚学习完 mosh 的 Python 6小时完整课程，想要通过实践去提升自己的代码能力从而应用在工作当中，以下是我通过Microsoft的NewBing去获取Python中的练习题，并尝试自行解决，然后提交给Newbing检查代码。</p>
<p>跟着AI学习Python，让编程变得更加轻松和有趣。</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>在这个学习过程中，我会跟随AI助教，每天完成AI出的三道题目，一步一步地掌握Python的基础知识和实用技巧。在实践中，我将花费30分钟的时间进行独立完成（可以Google，完成后交与AI进行批改，查看代码改进的地方，从而记录下来。以下我将会给出自己写的代码，与AI的代码, 和需要改进的地方。</p>
<h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><p>写一个函数，它接受一个字符串作为参数，然后返回这个字符串的反转。例如，如果输入”hello”，则返回”olleh”。</p>
<div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">self code</a></li><li class="tab"><a class="#first-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">number</span>():  </span><br><span class="line">    <span class="built_in">print</span>(x[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">number()</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_string</span>():               <span class="comment"># 函数名最好能够反映出它们的功能</span></span><br><span class="line">    x = <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(x[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">reverse_string()</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><p>写一个函数，它接受一个列表作为参数，然后返回这个列表中的最大值和最小值。例如，如果输入[1, 2, 3, 4, 5]，则返回(5, 1)。</p>
<div class="tabs" id="tab-second"><ul class="nav-tabs"><li class="tab active"><a class="#second-1">self code</a></li><li class="tab"><a class="#second-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>():</span><br><span class="line">    l = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>]        </span><br><span class="line">    max_l = <span class="built_in">max</span>(l)</span><br><span class="line">    min_l = <span class="built_in">min</span>(l)</span><br><span class="line">    <span class="keyword">return</span> max_l, min_l</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>())</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list</span>():</span><br><span class="line">    <span class="comment">#你的list函数中的l列表最好用数字而不是字符串，因为字符串的比较是按照字典序的，可能会出现意外的结果。比如&quot;10&quot;会比&quot;2&quot;小，因为&quot;1&quot;的ASCII码比&quot;2&quot;小。</span></span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]        </span><br><span class="line">    max_l = <span class="built_in">max</span>(l)</span><br><span class="line">    min_l = <span class="built_in">min</span>(l)</span><br><span class="line">    <span class="keyword">return</span> max_l, min_l</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h4><p>写一个函数，它接受一个正整数n作为参数，然后返回斐波那契数列的第n项。斐波那契数列是这样定义的:<br>第一项和第二项都是1，从第三项开始，每一项都是前两项的和。例如，斐波那契数列的前10项是：1, 1, 2, 3, 5, 8, 13, 21, 34, 55。</p>
<div class="tabs" id="tab-frist"><ul class="nav-tabs"><li class="tab active"><a class="#frist-1">self code</a></li><li class="tab"><a class="#frist-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="frist-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="frist-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用递归实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_recursive</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 如果n是1或者2，直接返回1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 否则，返回前两项的和</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci_recursive(n - <span class="number">1</span>) + fibonacci_recursive(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用循环实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_iterative</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 初始化第一项和第二项为1</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 如果n是1或者2，直接返回1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 否则，从第三项开始循环计算</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 循环n-2次</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 计算当前项为前两项的和</span></span><br><span class="line">            c = a + b</span><br><span class="line">            <span class="comment"># 更新前两项为当前项和前一项</span></span><br><span class="line">            a = b</span><br><span class="line">            b = c</span><br><span class="line">        <span class="comment"># 返回最后一项</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line"><span class="built_in">print</span>(fibonacci_recursive(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(fibonacci_iterative(<span class="number">10</span>))</span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着AI学Python(day2)</title>
    <url>/2023/04/05/python-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AFday2/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>想要通过实践去提升自己的代码能力从而应用在工作当中，以下是我通过Microsoft的NewBing去获取Python中的练习题，并尝试自行解决，然后提交给Newbing检查代码。</p>
<p>跟着AI学习Python，让编程变得更加轻松和有趣。</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>在这个学习过程中，我会跟随AI助教，每天完成AI出的三道题目，一步一步地掌握Python的基础知识和实用技巧。在实践中，我将花费30分钟的时间进行独立完成（可以Google，完成后交与AI进行批改，查看代码改进的地方，从而记录下来。以下我将会给出自己写的代码，与AI的代码, 和需要改进的地方。</p>
<h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><p>编写一个python脚本，可以批量检测一组服务器的运行状态，<br>包括CPU使用率，内存使用率，磁盘空间，网络连接等，并将结果保存到一个csv文件中。</p>
<div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">self code</a></li><li class="tab"><a class="#first-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> paramiko <span class="comment"># 用于远程登录服务器</span></span><br><span class="line"><span class="keyword">import</span> psutil <span class="comment"># 用于获取系统信息</span></span><br><span class="line"><span class="keyword">import</span> csv <span class="comment"># 用于操作csv文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于登录服务器并获取状态信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_server_status</span>(<span class="params">ip, username, password</span>):</span><br><span class="line">    <span class="comment"># 创建一个ssh客户端对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置自动添加主机密钥</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(ip, username=username, password=password)</span><br><span class="line">    <span class="comment"># 创建一个sftp客户端对象，用于传输文件</span></span><br><span class="line">    sftp = ssh.open_sftp()</span><br><span class="line">    <span class="comment"># 在服务器上创建一个临时文件，用于存储状态信息</span></span><br><span class="line">    sftp.<span class="built_in">open</span>(<span class="string">&quot;/tmp/status.txt&quot;</span>, <span class="string">&quot;w&quot;</span>).close()</span><br><span class="line">    <span class="comment"># 在服务器上运行psutil命令，将状态信息写入临时文件</span></span><br><span class="line">    ssh.exec_command(<span class="string">&quot;python -c &#x27;import psutil; f = open(\&quot;/tmp/status.txt\&quot;, \&quot;w\&quot;); f.write(str(psutil.cpu_percent())+\&quot;,\&quot;+str(psutil.virtual_memory().percent)+\&quot;,\&quot;+str(psutil.disk_usage(\&quot;/\&quot;).percent)+\&quot;,\&quot;+str(psutil.net_io_counters().bytes_sent)+\&quot;,\&quot;+str(psutil.net_io_counters().bytes_recv))&#x27;&quot;</span>)</span><br><span class="line">    <span class="comment"># 从服务器上下载临时文件到本地</span></span><br><span class="line">    sftp.get(<span class="string">&quot;/tmp/status.txt&quot;</span>, <span class="string">&quot;status.txt&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭sftp客户端</span></span><br><span class="line">    sftp.close()</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line">    <span class="comment"># 打开本地的临时文件，读取状态信息</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;status.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        status = f.read().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="comment"># 返回一个字典，包含服务器的ip和状态信息</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;ip&quot;</span>: ip, <span class="string">&quot;cpu&quot;</span>: status[<span class="number">0</span>], <span class="string">&quot;memory&quot;</span>: status[<span class="number">1</span>], <span class="string">&quot;disk&quot;</span>: status[<span class="number">2</span>], <span class="string">&quot;sent&quot;</span>: status[<span class="number">3</span>], <span class="string">&quot;recv&quot;</span>: status[<span class="number">4</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个列表，用于存储要检测的服务器的信息，包括ip，用户名和密码</span></span><br><span class="line">servers = [</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.101&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.200&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.122&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.121&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 定义一个列表，用于存储所有服务器的状态信息</span></span><br><span class="line">status_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历要检测的服务器列表，调用函数获取状态信息，并添加到状态列表中</span></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> servers:</span><br><span class="line">    status = get_server_status(server[<span class="string">&quot;ip&quot;</span>], server[<span class="string">&quot;username&quot;</span>], server[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">    status_list.append(status)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个csv文件，用于保存状态列表中的数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;status.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 创建一个csv写入对象</span></span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="comment"># 写入表头</span></span><br><span class="line">    writer.writerow([<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;cpu&quot;</span>, <span class="string">&quot;memory&quot;</span>, <span class="string">&quot;disk&quot;</span>, <span class="string">&quot;sent&quot;</span>, <span class="string">&quot;recv&quot;</span>])</span><br><span class="line">    <span class="comment"># 写入数据</span></span><br><span class="line">    writer.writerows(status_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><p>编写一个python脚本，可以使用paramiko模块远程登录到一台Linux服务器，并执行一些基本的命令，如查看系统信息，安装软件包，修改配置文件等，并将输出打印到屏幕上。</p>
<div class="tabs" id="tab-second"><ul class="nav-tabs"><li class="tab active"><a class="#second-1">self code</a></li><li class="tab"><a class="#second-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> paramiko <span class="comment"># 用于远程登录服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于登录服务器并执行命令</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">ip, username, password, command</span>):</span><br><span class="line">    <span class="comment"># 创建一个ssh客户端对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置自动添加主机密钥</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(ip, username=username, password=password)</span><br><span class="line">    <span class="comment"># 执行命令，并获取标准输出和错误输出</span></span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">    <span class="comment"># 打印标准输出和错误输出</span></span><br><span class="line">    <span class="built_in">print</span>(stdout.read().decode())</span><br><span class="line">    <span class="built_in">print</span>(stderr.read().decode())</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要登录的服务器的信息，包括ip，用户名和密码</span></span><br><span class="line">server = &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;10.12.9.200&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要执行的命令列表</span></span><br><span class="line">commands = [</span><br><span class="line">    <span class="string">&quot;uname -a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yum install -y wget &quot;</span>,</span><br><span class="line">    <span class="string">&quot;wget https://github.com/prometheus/node_exporter/releases/download/v1.3.0/node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tar xzf node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nohup /root/node_exporter-1.3.0.linux-amd64/node_exporter &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历命令列表，调用函数执行命令，并打印分隔符</span></span><br><span class="line"><span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">    run_command(server[<span class="string">&quot;ip&quot;</span>], server[<span class="string">&quot;username&quot;</span>], server[<span class="string">&quot;password&quot;</span>], command)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> paramiko <span class="comment"># 用于远程登录服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于登录服务器并执行命令</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">ip, username, password, command</span>):</span><br><span class="line">    <span class="comment"># 创建一个ssh客户端对象</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置自动添加主机密钥</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(ip, username=username, password=password)</span><br><span class="line">    <span class="comment"># 执行命令，并获取标准输出和错误输出</span></span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">    <span class="comment"># 打印标准输出和错误输出</span></span><br><span class="line">    <span class="built_in">print</span>(stdout.read().decode())</span><br><span class="line">    <span class="built_in">print</span>(stderr.read().decode())</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要登录的服务器的信息，包括ip，用户名和密码</span></span><br><span class="line">server = &#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;192.168.1.101&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要执行的命令列表</span></span><br><span class="line">commands = [</span><br><span class="line">    <span class="string">&quot;uname -a&quot;</span>, <span class="comment"># 查看系统信息</span></span><br><span class="line">    <span class="string">&quot;yum install -y httpd&quot;</span>, <span class="comment"># 安装httpd软件包</span></span><br><span class="line">    <span class="string">&quot;sed -i &#x27;s/Listen 80/Listen 8080/g&#x27; /etc/httpd/conf/httpd.conf&quot;</span>, <span class="comment"># 修改httpd配置文件，将监听端口改为8080</span></span><br><span class="line">    <span class="string">&quot;systemctl restart httpd&quot;</span> <span class="comment"># 重启httpd服务</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历命令列表，调用函数执行命令，并打印分隔符</span></span><br><span class="line"><span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">    run_command(server[<span class="string">&quot;ip&quot;</span>], server[<span class="string">&quot;username&quot;</span>], server[<span class="string">&quot;password&quot;</span>], command)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h4><p>编写一个python脚本，可以使用requests模块调用一个RESTful API，并解析返回的JSON数据，根据不同的状态码和响应内容进行相应的处理，如打印信息，发送邮件通知，重试请求等。</p>
<div class="tabs" id="tab-frist"><ul class="nav-tabs"><li class="tab active"><a class="#frist-1">self code</a></li><li class="tab"><a class="#frist-2">AI code</a></li></ul><div class="tab-content"><div class="tab-pane active" id="frist-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="frist-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="comment"># 用于调用RESTful API</span></span><br><span class="line"><span class="keyword">import</span> json <span class="comment"># 用于解析JSON数据</span></span><br><span class="line"><span class="keyword">import</span> smtplib <span class="comment"># 用于发送邮件</span></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText <span class="comment"># 用于构造邮件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于调用RESTful API，并解析返回的JSON数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_api</span>(<span class="params">url, headers, data</span>):</span><br><span class="line">    <span class="comment"># 尝试发送POST请求，并获取响应对象</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, headers=headers, data=data)</span><br><span class="line">    <span class="comment"># 如果发生异常，打印异常信息，并返回None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 如果响应状态码是200，表示请求成功</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 尝试解析响应内容为JSON格式，并返回字典对象</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = json.loads(response.text)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="comment"># 如果解析失败，打印异常信息，并返回None</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 如果响应状态码是其他值，表示请求失败，打印状态码和响应内容，并返回None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(response.status_code)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于发送邮件通知</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">sender, password, receiver, subject, content</span>):</span><br><span class="line">    <span class="comment"># 创建一个MIMEText对象，用于构造邮件内容</span></span><br><span class="line">    message = MIMEText(content, <span class="string">&quot;plain&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 设置发件人，收件人和主题</span></span><br><span class="line">    message[<span class="string">&quot;From&quot;</span>] = sender</span><br><span class="line">    message[<span class="string">&quot;To&quot;</span>] = receiver</span><br><span class="line">    message[<span class="string">&quot;Subject&quot;</span>] = subject</span><br><span class="line">    <span class="comment"># 创建一个SMTP对象，用于连接邮件服务器</span></span><br><span class="line">    smtp = smtplib.SMTP_SSL(<span class="string">&quot;smtp.qq.com&quot;</span>, <span class="number">465</span>)</span><br><span class="line">    <span class="comment"># 登录发件人的邮箱账号和授权码</span></span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line">    <span class="comment"># 发送邮件，并打印结果</span></span><br><span class="line">    smtp.sendmail(sender, receiver, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Email sent successfully.&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭SMTP对象</span></span><br><span class="line">    smtp.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要调用的API的URL，请求头和请求体</span></span><br><span class="line">url = <span class="string">&quot;https://api.example.com/v1/user/login&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要发送的邮件的相关信息，包括发件人，授权码，收件人，主题和内容</span></span><br><span class="line">sender = <span class="string">&quot;123456789@qq.com&quot;</span></span><br><span class="line">password = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">receiver = <span class="string">&quot;987654321@qq.com&quot;</span></span><br><span class="line">subject = <span class="string">&quot;API call result&quot;</span></span><br><span class="line">content = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，获取API返回的结果</span></span><br><span class="line">result = call_api(url, headers, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果结果不是None，表示请求成功并解析成功</span></span><br><span class="line"><span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 根据不同的响应内容进行相应的处理</span></span><br><span class="line">    <span class="comment"># 如果响应内容中有code字段，并且值为0，表示登录成功，打印用户信息，并将内容写入邮件内容中</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;code&quot;</span> <span class="keyword">in</span> result <span class="keyword">and</span> result[<span class="string">&quot;code&quot;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Login successful.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;User info:&quot;</span>, result[<span class="string">&quot;data&quot;</span>])</span><br><span class="line">        content += <span class="string">&quot;Login successful.\n&quot;</span></span><br><span class="line">        content += <span class="string">&quot;User info: &quot;</span> + <span class="built_in">str</span>(result[<span class="string">&quot;data&quot;</span>]) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="comment"># 如果响应内容中有code字段，并且值为1，表示登录失败，打印错误信息，并将内容写入邮件内容中</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;code&quot;</span> <span class="keyword">in</span> result <span class="keyword">and</span> result[<span class="string">&quot;code&quot;</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Login failed.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error info:&quot;</span>, result[<span class="string">&quot;msg&quot;</span>])</span><br><span class="line">        content += <span class="string">&quot;Login failed.\n&quot;</span></span><br><span class="line">        content += <span class="string">&quot;Error info: &quot;</span> + result[<span class="string">&quot;msg&quot;</span>] + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="comment"># 如果响应内容中没有code字段，或者值为其他值，表示未知的响应内容，打印原始响应内容，并将内容写入邮件内容中</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Unknown response.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Response info:&quot;</span>, result)</span><br><span class="line">        content += <span class="string">&quot;Unknown response.\n&quot;</span></span><br><span class="line">        content += <span class="string">&quot;Response info: &quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="comment"># 如果结果是None，表示请求失败或解析失败，打印错误信息，并将内容写入邮件内容中</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;API call failed or JSON parse failed.&quot;</span>)</span><br><span class="line">    content += <span class="string">&quot;API call failed or JSON parse failed.\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，发送邮件通知，并附上邮件内容</span></span><br><span class="line">send_email(sender, password, receiver, subject, content)</span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python自动化批量部署node_exporter</title>
    <url>/2023/04/09/python%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E9%83%A8%E7%BD%B2node-exporter/</url>
    <content><![CDATA[<h4 id="介绍-amp-环境"><a href="#介绍-amp-环境" class="headerlink" title="介绍&amp;环境"></a>介绍&amp;环境</h4><p>node_exporter是一个用Go编写的可插拔的度量收集器，它可以暴露*NIX内核和硬件相关的度量指标1。它可以通过HTTP端口9100（默认）监听和提供度量数据2。它可以被Prometheus实例配置和抓取，以监控主机系统的性能和状态。 <strong>Centos7</strong></p>
<h4 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h4><p>我们需要定义一个主程序文件main.py和存储服务器信息的文件remote_server.py</p>
<div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">main</a></li><li class="tab"><a class="#first-2">server</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主程序，使用多线程来批量登录并执行命令</span></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> remote_server <span class="keyword">import</span> servers_ex <span class="comment"># 导入服务器信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">server</span>):</span><br><span class="line">    <span class="comment"># 定义一个函数，用来连接服务器并执行命令</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.connect(server[<span class="string">&#x27;hostname&#x27;</span>], server[<span class="string">&#x27;port&#x27;</span>], server[<span class="string">&#x27;username&#x27;</span>], server[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">    <span class="comment"># 这里可以根据需要修改要执行的命令</span></span><br><span class="line">    <span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">        <span class="comment"># 执行命令，并获取标准输出和错误输出</span></span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">        <span class="comment"># 打印标准输出和错误输出</span></span><br><span class="line">        output = stdout.read()</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br><span class="line">    <span class="comment"># 关闭ssh客户端</span></span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line">commands = [</span><br><span class="line">    <span class="string">&quot;uname -a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yum install -y wget &quot;</span>,</span><br><span class="line">    <span class="string">&quot;wget https://github.com/prometheus/node_exporter/releases/download/v1.3.0/node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tar xzf node_exporter-1.3.0.linux-amd64.tar.gz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nohup /root/node_exporter-1.3.0.linux-amd64/node_exporter &gt;/dev/null 2&gt;&amp;1 &amp;&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">threads = [] <span class="comment"># 创建一个空列表，用来存储线程对象</span></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> servers_ex: <span class="comment"># 遍历服务器列表</span></span><br><span class="line">    t = threading.Thread(target=run_command, args=(server,)) <span class="comment"># 为每个服务器创建一个线程，并传入服务器信息作为参数</span></span><br><span class="line">    threads.append(t) <span class="comment"># 将线程对象添加到列表中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads: <span class="comment"># 遍历线程列表</span></span><br><span class="line">    t.start() <span class="comment"># 启动每个线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads: <span class="comment"># 遍历线程列表</span></span><br><span class="line">    t.join() <span class="comment"># 等待每个线程结束</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;All done&#x27;</span>) <span class="comment"># 所有线程结束后打印提示信息</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">servers_ex = [</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.101&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.121&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.122&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;10.12.9.200&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;22&quot;</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span>, &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div></div></div></div>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>登录服务器查看 <code>ps -ef | grep node_exporter </code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230409183436.png"
                      alt="link"
                ></p>
<h4 id="Prometheus添加监控"><a href="#Prometheus添加监控" class="headerlink" title="Prometheus添加监控"></a>Prometheus添加监控</h4><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node-exporter&quot;</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.101</span><span class="string">:9100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.122</span><span class="string">:9100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.121</span><span class="string">:9100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.12</span><span class="number">.9</span><span class="number">.200</span><span class="string">:9100</span></span><br></pre></td></tr></table></figure></div>
<h4 id="优化脚本"><a href="#优化脚本" class="headerlink" title="优化脚本"></a>优化脚本</h4><p>有时候node_exporter里面当中有很多我们不需要采集的参数，这时候我们就可以把它们进行丢弃或者只采集我们想要的指标，以保证我们的程序占用较少资源，减轻Prometheus的查询负载。<br>修改exec_command：<br><code>nohup /root/node_exporter-1.3.0.linux-amd64/node_exporter --no-collector.hwmon --no-collector.nfs --no-collector.nfsd --no-collector.nvme --no-collector.dmi --no-collector.arp &gt;/dev/null 2&gt;&amp;1 &amp;</code></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>Vmess + TLS + WS 实现科学上网</title>
    <url>/2023/03/12/vmess-ws-tls-web%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li><p>vps购买：<a class="link"   href="https://bandwagonhost.com/" >https://bandwagonhost.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>               #系统使用：Debian 10</p>
</li>
<li><p><em>优惠码：<code>BWHNCXNVXV</code></em>     </p>
</li>
<li><p>域名购买：<a class="link"   href="https://namesilo.com/" >https://namesilo.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>     </p>
</li>
<li><p>ssh工具：<a class="link"   href="https://www.hostbuf.com/t/988.html" >https://www.hostbuf.com/t/988.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h3 id="节点搭建"><a href="#节点搭建" class="headerlink" title="节点搭建"></a>节点搭建</h3><div class="note note-primary icon-padding"><i class="note-icon fa-solid fa-circle-arrow-right"></i><p>直接全选复制粘贴即可</p>
</div> 
<p><code>apt update -y &amp;&amp; apt-get install vim curl wget  -y</code></p>
<h6 id="安装x-ui面板"><a href="#安装x-ui面板" class="headerlink" title="安装x-ui面板"></a>安装x-ui面板</h6><p>X-ui出于安全考虑，安装&#x2F;更新完成后需要强制修改端口与账户密码，step by step 即可<br>安装完成后输入<code>x-ui</code>即可管理面板<br><code>bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/xui-1.png"
                      alt="link"
                ><br>配置如上所示端口随便，id用默认生成的就行，点击查看按钮复制链接导入V2ray<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/xui-2.png"
                      alt="link"
                ><br>对应的面板设置，重启完面板后我们是登录不进去的，因为还没配置nginx</p>
<h6 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h6><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">apt install nginx socat -y</span><br><span class="line"><span class="comment">#安装acme：</span></span><br><span class="line">curl https://get.acme.sh | sh</span><br><span class="line"><span class="comment">#添加软链接：</span></span><br><span class="line"><span class="built_in">ln</span> -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh</span><br><span class="line"><span class="comment">#切换CA机构： </span></span><br><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br><span class="line"><span class="comment">#申请证书： </span></span><br><span class="line">acme.sh  --issue -d 你的域名 -k ec-256 --webroot  /var/www/html</span><br><span class="line"><span class="comment">#安装证书：</span></span><br><span class="line">acme.sh --install-cert -d 你的域名 --ecc --key-file       /etc/x-ui/server.key  --fullchain-file /etc/x-ui/server.crt --reloadcmd     <span class="string">&quot;systemctl force-reload nginx&quot;</span></span><br></pre></td></tr></table></figure></div>
<h6 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h6><p><code>vim /etc/nginx/nginx.conf</code> 替换原有配置文件。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;    </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    gzip on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line"></span><br><span class="line">        server_name nicename.co;  <span class="comment">#你的域名</span></span><br><span class="line">        ssl_certificate       /etc/x-ui/server.crt;  <span class="comment">#证书位置</span></span><br><span class="line">        ssl_certificate_key   /etc/x-ui/server.key; <span class="comment">#私钥位置</span></span><br><span class="line"></span><br><span class="line">        ssl_session_timeout 1d;</span><br><span class="line">        ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">        ssl_session_tickets off;</span><br><span class="line">        ssl_protocols    TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://bing.com; <span class="comment">#伪装网址</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_ssl_server_name on;</span><br><span class="line">            sub_filter_once off;</span><br><span class="line">            sub_filter <span class="string">&quot;bing.com&quot;</span> <span class="variable">$server_name</span>;</span><br><span class="line">            proxy_set_header Host <span class="string">&quot;bing.com&quot;</span>;</span><br><span class="line">            proxy_set_header Referer <span class="variable">$http_referer</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">            proxy_set_header Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line">            proxy_set_header Accept-Language <span class="string">&quot;zh-CN&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /xui &#123;   <span class="comment">#xui路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:9999;  <span class="comment">#xui监听端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        location /.well-known/ &#123;</span><br><span class="line">               root /var/www/html;</span><br><span class="line">            &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h6><p>通过修改nginx的配置文件实现ws path路径分流  </p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">location /ray &#123;   <span class="comment">#分流路径</span></span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_pass http://127.0.0.1:10000; <span class="comment">#Xray端口</span></span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="note note-danger icon-padding"><i class="note-icon fa-solid fa-times-circle"></i><p>TLS开启之后记得也要去你的域名服务商处更改为端对端完全加密，不然会提示重定向次数过多</p>
</div>]]></content>
      <categories>
        <category>Network-Operator</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>一台VPS搭建属于你的私有ChatGPT</title>
    <url>/2023/04/11/%E4%B8%80%E5%8F%B0VPS%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E7%A7%81%E4%BA%BAGPT/</url>
    <content><![CDATA[<div class="note-large notel-primary"><div class="notel-title"><p>前言</p>
</div><div class="notel-content"><p>相信最近有不少的小伙伴在登录chatGPT页面的时候会出现 <font color="red">1020</font> 错误码，这是因为你的IP地址被禁止登录 <a class="link"   href="https://chat.openai.com/" >https://chat.openai.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 这个页面了，今天我就教大家如何通过调用APIkey的方式在国内可以继续访问chatGPT来提高我们的工作效率。</p>
 </div></div>

<h4 id="介绍-amp-环境"><a href="#介绍-amp-环境" class="headerlink" title="介绍&amp;环境"></a>介绍&amp;环境</h4><ul>
<li>一台国外服务器，最好是美国或日本</li>
<li>一个OpenAI账号，最好是用服务器所在地的短信号码进行注册的</li>
<li>安装Linux系统，Debian 10 or CentOS 7</li>
<li>安装docker源</li>
</ul>
<h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><p>首先我们需要去创建我们的 APIkey, 进入这个网址 <a class="link"   href="https://platform.openai.com/" >https://platform.openai.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, 如果首次进的话需要登录或者注册（以上就不详细说明如何注册，网上很多方法Google一下就行）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230411205953.png"
                      alt="link"
                ><br>创建之后记得一定要保存我们的 “secret key”<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230411210224.png"
                      alt="link"
                ></p>
<p>接下来我们就需要在服务器上进行操作了，这里推荐使用 “FinalShell” 客户端有海外加速功能</p>
<div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">CentOS7</a></li><li class="tab"><a class="#first-2">Debian</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 yum 包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 docker 仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动 </span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 docker 是否安装成功</span></span><br><span class="line">docker run hello-world  </span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖软件</span></span><br><span class="line">apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加docker GPG key</span></span><br><span class="line"><span class="built_in">mkdir</span> -m 0755 -p /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg |  gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 docker仓库和安装版本</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">   <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker </span></span><br><span class="line"><span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 docker是否安装成功</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></div></div></div></div>
<p>看见屏幕输出显示 “Hello from Docker!” 就代表安装成功了，到这里为止我们的环境就搭建好了。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230411211614.png"
                      alt="link"
                ></p>
<p>接下来我们只需要执行以下命令安装程序，即可大功告成</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run  -d -p 0.0.0.0:3002:3002 --name chatgpt-web  --<span class="built_in">env</span> OPENAI_API_KEY=你复制的API_KEY  chenzhaoyu94/chatgpt-web</span><br><span class="line"></span><br><span class="line">docker ps  <span class="comment"># 查看运行的容器是否为 UP</span></span><br></pre></td></tr></table></figure></div>
<p>如果运行为Down可以执行 <code>docker rm chatgpt-web</code> 解决报错后在重新部署即可</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>接下来我们打开浏览器 http:&#x2F;&#x2F;服务器IP地址:3002&#x2F; </p>
<h4 id="添加安全配置"><a href="#添加安全配置" class="headerlink" title="添加安全配置"></a>添加安全配置</h4><p>想必大家登录进去的时候会发现不需要输入账号和密码，只是需要一个外网IP和端口就可以随意登录进去，而且还是http协议，这样对我们的网站非常不安全而且还容易被人盗用我们的APIkey（目前只有18美金免费），所以我们需要给我们的服务器加上点安全认证<br><code>docker rm -f chatgpt-web</code>删除前面创建的容器， 然后重新执行以下命令！</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run  -d -p 0.0.0.0:3002:3002 --name chatgpt-web --<span class="built_in">env</span> AUTH_SECRET_KEY=你访问登录的密钥 --<span class="built_in">env</span> OPENAI_API_KEY=你复制的API_KEY chenzhaoyu94/chatgpt-web</span><br></pre></td></tr></table></figure></div>
<p>当我们再次访问的时候就会弹出一个验证的框，此时输入你的登录密钥即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/lipaysamart/Blog-pic/20230411214321.png"
                      alt="link"
                ></p>
<h5 id="给网站添加SSL证书认证"><a href="#给网站添加SSL证书认证" class="headerlink" title="给网站添加SSL证书认证"></a>给网站添加SSL证书认证</h5><p>当然你还可以为网站添加一个证书，以保证你的流量不是以明文形式暴露在外网. 这里我们使用 <strong>Let’s Encrypt</strong>来申请免费证书</p>
<div class="tabs" id="tab-second"><ul class="nav-tabs"><li class="tab active"><a class="#second-1">CentOS7</a></li><li class="tab"><a class="#second-2">Debian</a></li></ul><div class="tab-content"><div class="tab-pane active" id="second-1"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 epel扩展源</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Ngninx</span></span><br><span class="line">yum install nginx -y </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Certbot客户端</span></span><br><span class="line">yum install certbot -y </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取证书 (注意该模式下会占用443端口，如果有Nginx或apache 要先停止)</span></span><br><span class="line">certbot certonly --standalone  -d www.example.com</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="second-2"><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">apt install nginx -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Certbot客户端</span></span><br><span class="line">apt install certbot -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取证书 (注意该模式下会占用443端口，如果有Nginx或apache 要先停止)</span></span><br><span class="line">certbot certonly --standalone  -d www.example.com</span><br></pre></td></tr></table></figure></div></div></div></div>

<p>证书生成完毕后，我们可以在 <code>/etc/letsencrypt/live/</code>目录下看到对应域名的文件夹。接下来我们要配置 Nginx， 将以下配置文件粘贴到 <code>/etc/nginx/nginx.conf</code> <strong>“http{}”</strong> 模块下。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name 你的域名;</span><br><span class="line">   <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">   listen 443 ssl;</span><br><span class="line">   server_name 你的域名;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># SSL证书和密钥的路径。</span></span><br><span class="line">   ssl_certificate /etc/letsencrypt/live/api.diamondfsd.com/fullchain.pem;</span><br><span class="line">   ssl_certificate_key /etc/letsencrypt/live/api.diamondfsd.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://服务器IP地址:3002;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
<p>再次打开浏览器，直接输入域名即可访问到我们的chatGPT-WEB了，并且我们左上角也添加了一把小锁。</p>
<div class="note note-warning icon-padding"><i class="note-icon fa-solid fa-exclamation-circle"></i><p>机器人的回复速度会受到网络影响，所以卡顿和加载超时属于正常现象。</p>
</div>]]></content>
      <categories>
        <category>Other-Operator</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Hexo搭建个人Blog</title>
    <url>/2023/03/11/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/</url>
    <content><![CDATA[<h3 id="Hexo环境准备"><a href="#Hexo环境准备" class="headerlink" title="Hexo环境准备"></a>Hexo环境准备</h3><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p>直接到官网上下载安装即可<a class="link"   href="https://nodejs.org/en/download/" >https://nodejs.org/en/download/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li>Node自带npm</li>
<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>      #更换npm源</li>
</ul>
<h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><ul>
<li>Windows：下载并安装 git.</li>
<li>Mac：使用 Homebrew, MacPorts 或者下载 安装程序。</li>
<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>
<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>
<li>安装完之后到你要安装的路径下右键打开”git bash here”</li>
</ul>
<h3 id="开始安装Hexo"><a href="#开始安装Hexo" class="headerlink" title="开始安装Hexo"></a>开始安装Hexo</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">or</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
<ul>
<li>输入hexo -v 查看版本</li>
</ul>
<h5 id="新建Blog文件夹-x2F-初始化Hexo-x2F-安装npm"><a href="#新建Blog文件夹-x2F-初始化Hexo-x2F-安装npm" class="headerlink" title="新建Blog文件夹&#x2F;初始化Hexo&#x2F;安装npm"></a>新建Blog文件夹&#x2F;初始化Hexo&#x2F;安装npm</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init Blog          #初始化Hexo</span><br><span class="line">cd blog</span><br><span class="line">npm install             #安装npm</span><br></pre></td></tr></table></figure></div>
<h5 id="启动服务Site"><a href="#启动服务Site" class="headerlink" title="启动服务Site"></a>启动服务Site</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g                  #生成 hexo generate </span><br><span class="line">hexo s                  #启动服务预览 hexo server                           </span><br></pre></td></tr></table></figure></div>
<ul>
<li>本地访问<a class="link"   href="http://localhost:4000/" >http://localhost:4000/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 至此Hexo就搭建好了。</li>
</ul>
<h3 id="将网站托管至GitHub"><a href="#将网站托管至GitHub" class="headerlink" title="将网站托管至GitHub"></a>将网站托管至GitHub</h3><h5 id="1-新建仓库和Token"><a href="#1-新建仓库和Token" class="headerlink" title="1. 新建仓库和Token"></a>1. 新建仓库和Token</h5><p>仓库名称格式：用户名+GitHub.io<br>Token: 登录github设置setting-&gt;Developer Settings-&gt;Prosonal access tokens 注意勾选权限！</p>
<h5 id="2-安装upload插件"><a href="#2-安装upload插件" class="headerlink" title="2. 安装upload插件"></a>2. 安装upload插件</h5><p><code>npm install hexo-deployer-git --save</code></p>
<h5 id="3-修改Hexo配置文件指定仓库路径"><a href="#3-修改Hexo配置文件指定仓库路径" class="headerlink" title="3. 修改Hexo配置文件指定仓库路径"></a>3. 修改Hexo配置文件指定仓库路径</h5><p>在你blog文件夹下找到”_config.yml,ctrl+f 定位到deploy配置,注意格式deploy下的配置要缩进两行。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://&lt;Token&gt;@github.com/用户名/仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></div>
<h5 id="4-推送Site到Github"><a href="#4-推送Site到Github" class="headerlink" title="4. 推送Site到Github"></a>4. 推送Site到Github</h5><p><code>hexo d</code>                      #部署hexo deploy</p>
<h5 id="5-访问地址-https-x2F-x2F-仓库名-github-io-x2F"><a href="#5-访问地址-https-x2F-x2F-仓库名-github-io-x2F" class="headerlink" title="5. 访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;"></a>5. 访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;</h5><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>想要更换掉固定模板风格，你可以在GitHub搜索Hexo主题或者去到<a class="link"   href="https://hexo.io/themes/%E4%B8%8B%E6%8C%91%E9%80%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%8C%89%E7%85%A7%E8%AF%A5%E6%A8%A1%E6%9D%BF%E4%B8%8B%E7%9A%84" >https://hexo.io/themes/下挑选自定义模板，之后按照该模板下的 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> How To Use? step by step 即可。<br>一般步骤为：</p>
<ol>
<li>下载</li>
<li>把包丢到themes文件夹下面</li>
<li>配置Hero的_config.yml，修改”themes: 模板名”</li>
<li>本地调试完之后，我们就可以推送到GitHub上了。</li>
<li>cd到你的blog文件夹下Use commond:<code>hexo clean</code> -&gt; <code>hexo g</code> -&gt; <code>hexo d</code></li>
<li>访问地址 https:&#x2F;&#x2F;仓库名.github.io&#x2F;</li>
</ol>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>Hexo使用Markdown语法，它可以使普通文本具有一定的格式。<br>cd至blog文件下 <code>hexo new &quot;my frist blog&quot;</code><br>查看source资源下有没有我们刚刚创建的文章<br>之后就是发布的步骤&#x2F;&#x2F;清理hexo clean&#x2F;&#x2F;构建hexo g&#x2F;&#x2F;上传hexo d （如果上传报错，大多是网络原因，多上传几次即可）</p>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>有时我们不满足主题自由的一些页面，希望自己添加一些页面。<br>我们可以新建页面,新建页面则会在hexo的source中新建该页面文件并生成md文件，这就是你要编辑的博客页了。<br><code>hexo new page &quot;my home page&quot;</code><br>然后打开主题的配置文件_config.yml，在菜单属性menu中的添加如下（注意不是Hexo的配置文件）<br>将页面路径联接到页面上去（是一个key:value）左侧定义菜单,右侧定义页面</p>
<h4 id="Hexo命令清单"><a href="#Hexo命令清单" class="headerlink" title="Hexo命令清单"></a>Hexo命令清单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g                      #安装Hexo</span><br><span class="line">npm update hexo -g                       #升级</span><br><span class="line">hexo init                                #初始化博客</span><br><span class="line">hexo server                              #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s                           #静态模式</span><br><span class="line">hexo server -p 5000                      #更改端口</span><br><span class="line">hexo server -i 192.168.1.1               #自定义 IP</span><br><span class="line">hexo clean                               #清除缓存，若是网页正常情况下可以忽略这条命令</span><br><span class="line">hexo new draft &quot;文件名&quot;                  #新建草稿文件</span><br><span class="line">hexo server --draft                      #预览草稿文件</span><br><span class="line">hexo publish &quot;文件名&quot;                    #发布草稿文件     </span><br></pre></td></tr></table></figure></div>
<h4 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;          #新建文章</span><br><span class="line">hexo g == hexo generate                          #生成      </span><br><span class="line">hexo s == hexo server                            #启动服务预览</span><br><span class="line">hexo d == hexo deploy                            #部署</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Other-Operator</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
